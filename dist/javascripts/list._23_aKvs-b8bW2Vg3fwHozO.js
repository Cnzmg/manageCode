/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/public/javascripts/interactive/list.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/public/javascripts/interactive/list.js":
/*!****************************************************!*\
  !*** ./src/public/javascripts/interactive/list.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nif (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent)) {\n  window.onload = function (params) {\n    for (var i = 0; i < document.getElementsByClassName('el-dialog').length; i++) {\n      document.getElementsByClassName('el-dialog')[i].style.width = '100%'; //iframe 里面的class \n    }\n\n    for (var _i = 0; _i < document.getElementsByClassName('w400').length; _i++) {\n      document.getElementsByClassName('w400')[_i].style.width = '100%'; //限定的表单宽度\n    }\n  };\n}\n\nwindow.addEventListener('pageshow', function (params) {\n  var par = params.target.URL.split('*').length > 1 ? params.target.URL.split('*')[0] : params.target.URL;\n  var _ref = [parent.all.jq, parent.all.json, // parent.document.getElementById('tagHref').getAttribute('src').replace('..', '/manage').split('?')[0],\n  '/manage' + par.substring(par.lastIndexOf('/'), par.lastIndexOf('?') == -1 ? par.length : par.lastIndexOf('?')), document.getElementById('c-container-list').getAttribute('data-uri')],\n      $ = _ref[0],\n      token = _ref[1],\n      u = _ref[2],\n      uri = _ref[3];\n  var _data = {\n    id: ym.init.COMPILESTR.decrypt(token.id),\n    token: ym.init.COMPILESTR.decrypt(token.asset),\n    url: u\n  };\n  new Vue({\n    el: '#c-container-list',\n    data: function data() {\n      return {\n        fileUpdata: ( true ? parent.all.json._j.URLS.Development_Files_ : undefined) + 'upload_file',\n        loading: false,\n        more: false,\n        tableData: [],\n        currentPage: 1,\n        pageSize: 20,\n        total: 0,\n        page: 1,\n        select: '',\n        searchVal: '',\n        searchName: 'name',\n        listSearch: {\n          hasTest: 0,\n          //默认是排除测试数据\n          timeUnit: 3,\n          //默认查询的是以日为单位的统计日志\n          _time_: ''\n        },\n        //新的列表查询对象\n        selectLong: '',\n        machineNumbers: {\n          machineCount: 0\n        },\n        selectFil: '',\n        selectMater: '',\n        dateLog: '',\n        InputAndVisible: false,\n        //列表操作\n        formData: {\n          machineType: 1,\n          name: '',\n          mUpdateUrl: '',\n          //应用更新\n          madTitle: '',\n          madOrder: '',\n          madUrl: '',\n          madId: '',\n          adminName: '',\n          //超级管理员\n          adminPwd: '',\n          realName: '',\n          adminMobile: '',\n          named: '',\n          roleId: '',\n          isShow: 1,\n          //是否显示\n          isSys: 0,\n          //是否系统配置\n          disableConf: false,\n          //disable 是否可操作\n          disableConfMahineName: '',\n          //机器类型名\n          machineBunkerConfigAllId: '',\n          //绑定机器的配置ID\n          numberBigConf: [//料仓配置\n          {\n            name: '',\n            isShow: 1,\n            number: 1\n          }, {\n            name: '',\n            isShow: 1,\n            number: 2\n          }, {\n            name: '',\n            isShow: 1,\n            number: 3\n          }, {\n            name: '',\n            isShow: 1,\n            number: 4\n          }, {\n            name: '',\n            isShow: 1,\n            number: 5\n          }, {\n            name: '',\n            isShow: 1,\n            number: 6\n          }, {\n            name: '水',\n            isShow: 1,\n            number: 100\n          }, {\n            name: '杯子',\n            isShow: 1,\n            number: 160\n          }, {\n            name: '咖啡',\n            isShow: 1,\n            number: 170\n          }],\n          numberSmallConf: [{\n            name: '水',\n            isShow: 1,\n            number: 100\n          }, {\n            name: '咖啡',\n            isShow: 1,\n            number: 170\n          }, {\n            name: '牛奶',\n            isShow: 1,\n            number: 180\n          }],\n          has: '',\n          bunkerConfigName: '',\n          raffleName: '',\n          //小程序大转盘配置\n          allowConsumeChance: 0,\n          allowMemberConvert: 0,\n          allowShareChance: 0,\n          convertMilliliter: 0,\n          maxLuckyValue: 500,\n          status: 1\n        },\n        imageList: {\n          mUpdateUrl: [],\n          //图片li\n          madUrl: [] //视频广告\n\n        },\n        TableAndVisible: false,\n        TableFormData: [],\n        UpdateTableAndVisible: false,\n        UpdateTableFormData: [],\n        listId: '',\n        productCount: 0,\n        productId: [],\n        detailTableAndVisible: false,\n        detailTableFormData: [],\n        options: [],\n        unbinadmin: {\n          adminIds: '',\n          maintainerName: '',\n          //这里是运维\n          maintainerPhone: '',\n          bindMachine: '',\n          state: ''\n        },\n        addressTable: false,\n        //用户地址 \n        addressTables: [],\n        //地址数组\n        pageTableNum: 1,\n        //循环数组起始值\n        pageTimerOut: false,\n        // 终止值\n        pageCount: 0,\n        //总数值\n        UnFormData: [],\n        adminIds: [],\n        listIds: [],\n        machineNumber: [],\n        restaurants: [],\n        //用户ID搜索相关\n        state: '',\n        timeout: null,\n        userIds: [],\n        userIdts: [],\n        userMode: [],\n        machineLogs: [],\n        //设备日志\n        machineLogViews: false,\n        fileData: _data,\n        num: 1,\n        dialogVisible: false,\n        dialogImageUrl: '',\n        adevtmodel: false,\n        //视频添加/编辑\n        adIds: [],\n        html: '',\n        bunkerConf: {\n          name: '',\n          time: ''\n        },\n        bunkerConfNumber: true,\n        //大小机器的料仓显示\n        pickerOptions: {\n          //时间节点\n          shortcuts: [{\n            text: '最近一周',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近一个月',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近三个月',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近半年',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 180);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近一年',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 365);\n              picker.$emit('pick', [start, end]);\n            }\n          }]\n        },\n        select_user: '',\n        //用户列表的批量操作\n        user_type: 1,\n        //用户类型\n        statues: {\n          user: false,\n          flow: false,\n          state: false,\n          ount: false\n        },\n        // 状态的显示/f\n        overdueTime: '',\n        grantCount: '',\n        ount: '',\n        //赠送抽奖次数\n        user_state: 1,\n        order: {},\n        refundMoney: {},\n        //订单退款\n        pathUrlExe: {},\n        //导出\n        optionsTime: [],\n        //时间选择\n        bool: '',\n        StatusName: new Map([['free', {\n          user: new Map([[1, '超级管理员'], [2, '系统管理员'], [3, '商户管理员']]),\n          statues: new Map([[0, '冻结'], [1, '正常']]),\n          machineType: new Map([[1, '大型柜式机'], [2, '小型桌面机'], [3, '无网单机']])\n        }], ['time', {\n          machineRun: new Map([[1, '正常'], [2, '故障'], [3, '离线'], [4, '维护'], [5, '维修'], [6, '维修完成']]),\n          couponTime: new Map([[1, '年'], [2, '月'], [3, '日'], [4, '周']])\n        }]]),\n        miniTurnableMore: true,\n        //小程序大转盘添加按钮是否显示\n        appointmentPay: {},\n        //预约详情\n        objectId: '',\n        //开通会员的查询 会员id\n        objectIds: [],\n        //开通会员的查询 会员id\n        pageparams: {} // 预存的页面搜索参数\n\n      };\n    },\n    created: function created() {\n      this.list();\n    },\n    methods: {\n      IError: function IError(err) {\n        var _this = this;\n\n        setTimeout(function () {\n          _this.loading = false;\n\n          if (err == \"\\u672A\\u767B\\u5F55\\u6216\\u8EAB\\u4EFD\\u9A8C\\u8BC1\\u8FC7\\u65F6\") {\n            // window.top.location.href = `../login.htm?hash:[]`;\n            parent.location.href = \"../login.htm?hash:[nK6t7a]\";\n          }\n        }, 1000);\n        this.$message.error('错了哦!' + err);\n      },\n      ISuccessfull: function ISuccessfull(e) {\n        var _this2 = this;\n\n        setTimeout(function () {\n          _this2.loading = false;\n        }, 1000);\n        this.$message({\n          message: '成功了哦!,' + e,\n          type: 'success'\n        });\n      },\n      handleSizeChange: function handleSizeChange(e) {\n        this.pageSize = e;\n        this.list(this.pageparams ? this.pageparams : null, true);\n      },\n      handleCurrentChange: function handleCurrentChange(e) {\n        this.page = e;\n        this.list(this.pageparams ? this.pageparams : null, true);\n      },\n      list: function list(params, bool) {\n        var _data_ = {},\n            it = this,\n            xml = [];\n\n        if (params) {\n          it.pageparams = params; //保存搜索条件\n\n          params._name_ && params._value_ ? params[params._name_] = params._value_ : null; //第一搜索key of value\n\n          if (params._time_) {\n            params['startDate'] = ym.init.getDateTime(params._time_[0]).split(' ')[0];\n            params['endDate'] = ym.init.getDateTime(params._time_[1]).split(' ')[0];\n\n            if (uri == 'statistics_shop' || uri == 'find_order_list') {\n              params['startTime'] = params['startDate'];\n              params['endTime'] = params['endDate'];\n              delete params['startDate'];\n              delete params['endDate'];\n            }\n\n            if (uri == 'admin_statistics_log_list') {\n              if (params.timeUnit == 2) {\n                params['startDate'] = params['startDate'].substring(0, params['startDate'].lastIndexOf('-'));\n                params['endDate'] = params['endDate'].substring(0, params['endDate'].lastIndexOf('-'));\n              } else if (params.timeUnit == 1) {\n                params['startDate'] = params['startDate'].split('-')[0];\n                params['endDate'] = params['endDate'].split('-')[0];\n              }\n            }\n          }\n        }\n\n        _data_ = Object.assign({\n          //初始对象\n          id: ym.init.COMPILESTR.decrypt(token.id),\n          token: ym.init.COMPILESTR.decrypt(token.asset),\n          url: u\n        }, params);\n        it.loading = true;\n        if (uri == 'manage_prodcut_list_list') _data_['type'] = 1; //临时处理存在此接口存在type 数值问题\n\n        if (uri == 'manage_machine_version') _data_['type'] = 1;\n        if (uri == 'find_machine_advertisement_list') _data_['type'] = 1;\n        if (uri == 'manage_advertisement_list_list') _data_['type'] = 1;\n        if (uri == 'client_user_list') _data_['type'] = 1;\n        if (uri == 'manage_dividend_list') _data_['type'] = 1;\n\n        if (uri == 'find_order_list') {\n          //处理订单的操作\n          var _machin_ = parent.document.getElementById('tagHref').getAttribute('src').split('*'); // 处理从设备列表过来的订单查看\n\n\n          _data_['name'] = JSON.stringify({\n            machineNumber: _machin_.length > 1 ? JSON.parse(decodeURI(_machin_[1])).machineNumber : '',\n            orderId: params ? params['name'] : ''\n          });\n          _data_['url'] = '/manage/orderList.html';\n        }\n\n        if (uri == 'admin_statistics_list' || uri == 'machine_statistics_list' || uri == 'admin_statistics_log_list') {\n          //新商户统计\n          _data_['startDate'] = _data_['startDate'] || ym.init.getDateTime(new Date().setTime(new Date().getTime() - 3600 * 1000 * 24 * 7)).split(' ')[0];\n          _data_['endDate'] = _data_['endDate'] || ym.init.getDateTime(new Date()).split(' ')[0];\n          it.listSearch._time_ = [_data_['startDate'], _data_['endDate']];\n          _data_['hasTest'] = _data_['hasTest'] || it.listSearch.hasTest;\n\n          if (uri == 'admin_statistics_log_list') {\n            _data_['timeUnit'] = params ? params['timeUnit'] : it.listSearch.timeUnit;\n          }\n        }\n\n        ;\n        _data_['page'] = !bool ? function () {\n          it.currentPage = 1;\n          return it.currentPage;\n        }() : it.page;\n        ym.init.XML({\n          method: uri == 'find_machine_poi_list' || uri == 'get_activity_list' || uri == 'statistics_list' || uri == 'maintainer_list' || uri == 'sys_draw_raffle_info' || uri == 'sys_user_raffle_share_list' ? \"GET\" : 'POST',\n          uri: token._j.URLS.Development_Server_ + uri,\n          async: false,\n          xmldata: _data_,\n          done: function done(res) {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              _data_ = {}; //清空\n\n              switch (uri) {\n                case \"find_user_list\":\n                  //admin users list\n                  for (var i = 0; i < res.adminShowList.length; i++) {\n                    xml.push({\n                      adminId: res.adminShowList[i].adminId,\n                      realName: res.adminShowList[i].realName,\n                      adminName: res.adminShowList[i].adminName,\n                      roleId: it.StatusName.get('free').user.get(res.adminShowList[i].roleId),\n                      adminStatus: it.StatusName.get('free').statues.get(res.adminShowList[i].adminStatus),\n                      nickName: res.adminShowList[i].nickName + '/' + res.adminShowList[i].userId,\n                      registerTime: ym.init.getDateTime(res.adminShowList[i].registerTime),\n                      parentAdminName: res.adminShowList[i].parentAdminName\n                    });\n                  }\n\n                  break;\n\n                case \"find_log_list\":\n                  //admin logs list\n                  for (var _i2 = 0; _i2 < res.logInfoList.length; _i2++) {\n                    xml.push({\n                      adminName: res.logInfoList[_i2].adminName,\n                      logContent: res.logInfoList[_i2].logContent,\n                      logTime: ym.init.getDateTime(res.logInfoList[_i2].logTime),\n                      permissionName: res.logInfoList[_i2].permissionName,\n                      realName: res.logInfoList[_i2].realName,\n                      roleId: it.StatusName.get('free').user.get(res.logInfoList[_i2].roleId)\n                    });\n                  }\n\n                  break;\n\n                case \"find_formula_list\":\n                  //formula list\n                  for (var _i3 = 0; _i3 < res.formulaInfoList.length; _i3++) {\n                    xml.push({\n                      formulaId: res.formulaInfoList[_i3].formulaId,\n                      formulaName: res.formulaInfoList[_i3].formulaName,\n                      createTime: ym.init.getDateTime(res.formulaInfoList[_i3].createTime),\n                      machineType: it.StatusName.get('free').machineType.get(res.formulaInfoList[_i3].machineType),\n                      formulaTemperature: res.formulaInfoList[_i3].formulaTemperature\n                    });\n                  }\n\n                  break;\n\n                case \"find_product_list\":\n                  //product list\n                  for (var _i4 = 0; _i4 < res.productShowList.length; _i4++) {\n                    xml.push({\n                      productId: res.productShowList[_i4].productId,\n                      productName: res.productShowList[_i4].productName,\n                      productPrice: parseFloat(res.productShowList[_i4].productPrice / 100).toFixed(2),\n                      productPicurl: res.productShowList[_i4].productPicurl,\n                      machineType: it.StatusName.get('free').machineType.get(res.productShowList[_i4].machineType),\n                      formulaName: res.productShowList[_i4].formulaName,\n                      bunkerNumber: res.productShowList[_i4].bunkerNumber,\n                      createTime: ym.init.getDateTime(res.productShowList[_i4].createTime).split(' ')[0],\n                      productRank: res.productShowList[_i4].productRank,\n                      productComment: res.productShowList[_i4].productComment\n                    });\n                  }\n\n                  break;\n\n                case \"manage_prodcut_list_list\":\n                  //product detailed list\n                  for (var _i5 = 0; _i5 < res.productListList.length; _i5++) {\n                    xml.push({\n                      listId: res.productListList[_i5].listId,\n                      listName: res.productListList[_i5].listName,\n                      machineType: it.StatusName.get('free').machineType.get(res.productListList[_i5].machineType)\n                    });\n                  }\n\n                  break;\n\n                case \"find_machine_list\":\n                  //machine list\n                  ym.init.XML({\n                    //machine sum、now state..\n                    method: 'POST',\n                    uri: token._j.URLS.Development_Server_ + 'find_machine_number',\n                    async: true,\n                    xmldata: {\n                      id: ym.init.COMPILESTR.decrypt(token.id),\n                      token: ym.init.COMPILESTR.decrypt(token.asset),\n                      url: u\n                    },\n                    done: function done(res) {\n                      it.machineNumbers['machineCount'] = res.machineCount;\n                      it.machineNumbers['offLineNum'] = res.offLineNum;\n                      it.machineNumbers['starvingNum'] = res.starvingNum;\n                      it.machineNumbers['faultNum'] = res.faultNum;\n                      it.machineNumbers['maintainNum'] = res.maintainNum;\n                      it.machineNumbers['repairNum'] = res.repairNum;\n                    }\n                  });\n\n                  for (var _i6 = 0; _i6 < res.machineShowList.length; _i6++) {\n                    xml.push({\n                      machineNumber: res.machineShowList[_i6].machineNumber,\n                      adminName: res.machineShowList[_i6].adminName,\n                      machineAddrDesc: res.machineShowList[_i6].machineAddrDesc,\n                      machineType: it.StatusName.get('free').machineType.get(res.machineShowList[_i6].machineType),\n                      machineSn: res.machineShowList[_i6].machineSn,\n                      machineScenePicUrl: res.machineShowList[_i6].machineScenePicUrl,\n                      wxacode: res.machineShowList[_i6].wxacode,\n                      onlineStatus: res.machineShowList[_i6].onlineStatus,\n                      failureStatus: res.machineShowList[_i6].failureStatus,\n                      materialStatus: res.machineShowList[_i6].materialStatus,\n                      maintainStatus: res.machineShowList[_i6].maintainStatus,\n                      runTimeStatus: res.machineShowList[_i6].runTimeStatus\n                    });\n                  }\n\n                  break;\n\n                case \"manage_machine_version\":\n                  //apk versions\n                  for (var _i7 = 0; _i7 < res.machineUpdateList.length; _i7++) {\n                    xml.push({\n                      mUpdateId: res.machineUpdateList[_i7].mUpdateId,\n                      mUpdateVersion: res.machineUpdateList[_i7].mUpdateVersion,\n                      versionCode: res.machineUpdateList[_i7].versionCode,\n                      mUpdateTime: ym.init.getDateTime(res.machineUpdateList[_i7].mUpdateTime),\n                      mUpdateDes: res.machineUpdateList[_i7].mUpdateDes,\n                      machineType: res.machineUpdateList[_i7].machineType,\n                      mUpdateUrl: res.machineUpdateList[_i7].mUpdateUrl\n                    });\n                  }\n\n                  break;\n\n                case \"find_machine_poi_list\":\n                  //small machine map setup\n                  for (var _i8 = 0; _i8 < res.poiList.length; _i8++) {\n                    xml.push({\n                      poiId: res.poiList[_i8].poiId,\n                      longitude: res.poiList[_i8].longitude,\n                      latitude: res.poiList[_i8].latitude,\n                      addr: res.poiList[_i8].addr,\n                      mapMarkerIcon: res.poiList[_i8].mapMarkerIcon,\n                      province: res.poiList[_i8].province + '/' + res.poiList[_i8].city + '/' + res.poiList[_i8].district,\n                      //省市区组合\n                      machineUrl: res.poiList[_i8].machineUrl,\n                      hide: res.poiList[_i8].hide,\n                      machineCount: res.poiList[_i8].machineCount,\n                      numberList: res.poiList[_i8].numberList\n                    });\n                  }\n\n                  break;\n\n                case \"find_machine_advertisement_list\":\n                  //machine vedio advertisement list\n                  for (var _i9 = 0; _i9 < res.machineAdvertisementList.length; _i9++) {\n                    xml.push({\n                      madId: res.machineAdvertisementList[_i9].madId,\n                      madTitle: res.machineAdvertisementList[_i9].madTitle,\n                      madUrl: res.machineAdvertisementList[_i9].madUrl,\n                      madStatus: res.machineAdvertisementList[_i9].madStatus,\n                      madTime: ym.init.getDateTime(res.machineAdvertisementList[_i9].madTime),\n                      madOrder: res.machineAdvertisementList[_i9].madOrder\n                    });\n                  }\n\n                  break;\n\n                case \"manage_advertisement_list_list\":\n                  //machine vedio detail list\n                  for (var _i10 = 0; _i10 < res.advertisementListList.length; _i10++) {\n                    xml.push({\n                      listId: res.advertisementListList[_i10].listId,\n                      listName: res.advertisementListList[_i10].listName\n                    });\n                  }\n\n                  break;\n\n                case \"statistics_shop\":\n                  for (var _i11 = 0; _i11 < res[\"package\"].ShopMachine.length; _i11++) {\n                    xml.push({\n                      adminID: res[\"package\"].ShopMachine[_i11].adminID,\n                      adminName: res[\"package\"].ShopMachine[_i11].adminName,\n                      payMoney: res[\"package\"].ShopMachine[_i11].payMoney,\n                      payCount: res[\"package\"].ShopMachine[_i11].payCount,\n                      machineCount: res[\"package\"].ShopMachine[_i11].machineCount,\n                      realName: res[\"package\"].ShopMachine[_i11].realName\n                    });\n                  }\n\n                  break;\n\n                case \"get_activity_list\":\n                  // activity charts\n                  for (var _i12 = 0; _i12 < res.activityList.length; _i12++) {\n                    xml.push({\n                      id: res.activityList[_i12].id,\n                      comment: res.activityList[_i12].comment,\n                      name: res.activityList[_i12].name,\n                      startTime: ym.init.getDateTime(res.activityList[_i12].startTime)\n                    });\n                  }\n\n                  break;\n\n                case \"client_user_list\":\n                  // ym.init.XML({ //会员类型\n                  //     method: 'POST',\n                  //     uri: token._j.URLS.Development_Server_ + 'find_client_user_list',\n                  //     async: false,\n                  //     xmldata: _data,\n                  //     done: function (res) {\n                  //         try {\n                  //             ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? (() => {\n                  //               it.html = `<el-button>用户类型</el-button>\n                  //               <el-select v-model=\"select\" slot=\"prepend\" placeholder=\"请选择\">\n                  //                   <el-option label=\"不限\" value=\"userType:\"></el-option>\n                  //                   <el-option label=\"普通用户\" value=\"userType:1\"></el-option>\n                  //                   <el-option label=\"测试用户\" value=\"userType:2\"></el-option>\n                  //                   <el-option label=\"免单用户\" value=\"userType:3\"></el-option>\n                  //               </el-select>`\n                  //             })() :\n                  //                 (() => {\n                  //                     throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                  //                 })()\n                  //         } catch (error) {\n                  //             it.IError(error);\n                  //         }\n                  //     }\n                  // });\n                  for (var _i13 = 0; _i13 < res.clientUserList.length; _i13++) {\n                    //client user list\n                    xml.push({\n                      userId: res.clientUserList[_i13].userId,\n                      headPicUrl: res.clientUserList[_i13].headPicUrl,\n                      nickName: res.clientUserList[_i13].nickName,\n                      mobile: res.clientUserList[_i13].mobile,\n                      userType: res.clientUserList[_i13].userType,\n                      source: res.clientUserList[_i13].source,\n                      userStatus: res.clientUserList[_i13].userStatus,\n                      registerTime: res.clientUserList[_i13].registerTime,\n                      compensateMilliliter: res.clientUserList[_i13].compensateMilliliter,\n                      memberMilliliter: res.clientUserList[_i13].memberMilliliter\n                    });\n                  }\n\n                  break;\n\n                case \"get_member_list\":\n                  // client user member list\n                  for (var _i14 = 0; _i14 < res.memberRuleList.length; _i14++) {\n                    xml.push({\n                      memberRuleId: res.memberRuleList[_i14].memberRuleId,\n                      memberRuleName: res.memberRuleList[_i14].memberRuleName,\n                      memberLevel: res.memberRuleList[_i14].memberLevel,\n                      duration: res.memberRuleList[_i14].duration,\n                      payMoney: res.memberRuleList[_i14].payMoney,\n                      discount: res.memberRuleList[_i14].discount,\n                      discountsStartTime: ym.init.getDateTime(res.memberRuleList[_i14].discountsStartTime).split(' ')[0],\n                      discountsEndTime: ym.init.getDateTime(res.memberRuleList[_i14].discountsEndTime).split(' ')[0],\n                      milliliter: res.memberRuleList[_i14].milliliter,\n                      memberPicUrl: res.memberRuleList[_i14].memberPicUrl,\n                      status: res.memberRuleList[_i14].status\n                    });\n                  }\n\n                  break;\n\n                case \"find_fault_feedback_list\":\n                  //feedback list\n                  for (var _i15 = 0; _i15 < res.faultFeedbackShowList.length; _i15++) {\n                    xml.push({\n                      nickName: res.faultFeedbackShowList[_i15].nickName,\n                      faultPhone: res.faultFeedbackShowList[_i15].faultPhone,\n                      machineNumber: res.faultFeedbackShowList[_i15].machineNumber,\n                      // machineAddr: res.faultFeedbackShowList[i].machineAddr,\n                      faultTime: ym.init.getDateTime(res.faultFeedbackShowList[_i15].faultTime),\n                      faultContent: res.faultFeedbackShowList[_i15].faultContent,\n                      orderId: res.faultFeedbackShowList[_i15].orderId\n                    });\n                  }\n\n                  break;\n\n                case \"find_coupon_list\":\n                  //coupon list\n                  for (var _i16 = 0; _i16 < res.couponInfoList.length; _i16++) {\n                    xml.push({\n                      couponId: res.couponInfoList[_i16].couponId,\n                      couponName: res.couponInfoList[_i16].couponName,\n                      couponType: res.couponInfoList[_i16].couponType,\n                      couponRangeName: res.couponInfoList[_i16].couponRangeName,\n                      couponMoney: parseFloat(res.couponInfoList[_i16].couponMoney / 100).toFixed(2),\n                      couponTime: res.couponInfoList[_i16].couponTime + \"( \" + it.StatusName.get('time').couponTime.get(res.couponInfoList[_i16].timeUnit) + \" )\"\n                    });\n                  }\n\n                  break;\n\n                case \"find_order_list\":\n                  //order list\n                  for (var _i17 = 0; _i17 < res.orders.length; _i17++) {\n                    xml.push({\n                      orderId: res.orders[_i17].orderId,\n                      spendingMoney: parseFloat(res.orders[_i17].spendingMoney).toFixed(2),\n                      paymentMoney: parseFloat(res.orders[_i17].paymentMoney).toFixed(2),\n                      paymentType: res.orders[_i17].paymentType,\n                      consumptionType: res.orders[_i17].consumptionType,\n                      orderStatus: res.orders[_i17].orderStatus,\n                      paymentTime: res.orders[_i17].paymentTime\n                    });\n                  }\n\n                  break;\n\n                case \"refund_order_list\":\n                  // refund order\n                  for (var _i18 = 0; _i18 < res.list.length; _i18++) {\n                    xml.push({\n                      orderId: res.list[_i18].orderId,\n                      refundId: res.list[_i18].refundId,\n                      createTime: res.list[_i18].createTime,\n                      paymentTime: res.list[_i18].paymentTime,\n                      refundTime: res.list[_i18].refundTime,\n                      refundMoney: parseFloat(res.list[_i18].refundMoney).toFixed(2),\n                      refundType: res.list[_i18].refundType == -1 ? '未知' : res.list[_i18].refundType,\n                      refundStatus: res.list[_i18].refundStatus,\n                      orderType: res.list[_i18].orderType\n                    });\n                  }\n\n                  break;\n\n                case \"statistics_list\":\n                  //order charts list\n                  for (var _i19 = 0; _i19 < res.statisticsList.length; _i19++) {\n                    xml.push({\n                      statisticsId: res.statisticsList[_i19].statisticsId,\n                      statisticsTime: ym.init.getDateTime(res.statisticsList[_i19].statisticsTime).split(' ')[0],\n                      statisticsDate: res.statisticsList[_i19].statisticsDate,\n                      statisticsMachine: res.statisticsList[_i19].statisticsMachine,\n                      adminName: res.statisticsList[_i19].adminName,\n                      refundMoney: res.statisticsList[_i19].refundMoney,\n                      orderCount: res.statisticsList[_i19].orderCount,\n                      cancelOrderCount: res.statisticsList[_i19].cancelOrderCount,\n                      refundOrderCount: res.statisticsList[_i19].refundOrderCount,\n                      sendCount: res.statisticsList[_i19].sendCount,\n                      refundAmount: res.statisticsList[_i19].refundAmount,\n                      sendUsers: res.statisticsList[_i19].sendUsers,\n                      userCount: res.statisticsList[_i19].userCount,\n                      completeAmount: res.statisticsList[_i19].completeAmount\n                    });\n                  }\n\n                  break;\n\n                case \"manage_dividend_list\":\n                  //share in the benefit or profit\n                  for (var _i20 = 0; _i20 < res.dList.length; _i20++) {\n                    xml.push({\n                      dId: res.dList[_i20].dId,\n                      orderId: res.dList[_i20].orderId,\n                      recId: res.dList[_i20].recId,\n                      recName: res.dList[_i20].recName,\n                      recType: res.dList[_i20].recType,\n                      recMoney: res.dList[_i20].recMoney,\n                      allMoney: res.dList[_i20].allMoney,\n                      recTime: res.dList[_i20].recTime\n                    });\n                  }\n\n                  break;\n\n                case \"maintainer_list\":\n                  //maintainer users list\n                  for (var _i21 = 0; _i21 < res.maintainerList.length; _i21++) {\n                    xml.push({\n                      maintainerId: res.maintainerList[_i21].maintainerId,\n                      maintainerName: res.maintainerList[_i21].maintainerName,\n                      maintainerPhone: res.maintainerList[_i21].maintainerPhone,\n                      adminName: res.maintainerList[_i21].adminName,\n                      nickName: res.maintainerList[_i21].nickName,\n                      maintainerStatus: res.maintainerList[_i21].maintainerStatus,\n                      auditStatus: res.maintainerList[_i21].auditStatus,\n                      royaltyRate: res.maintainerList[_i21].royaltyRate,\n                      auditAdminName: res.maintainerList[_i21].auditAdminName,\n                      bindMachine: res.maintainerList[_i21].bindMachine == -1 ? '无' : res.maintainerList[_i21].bindMachine\n                    });\n                  }\n\n                  break;\n\n                case \"material_log_list\":\n                  var _loop = function _loop(_i22) {\n                    xml.push({\n                      materialLogId: res.materialLog[_i22].materialLogId,\n                      machineNumber: res.materialLog[_i22].machineNumber,\n                      adminName: res.materialLog[_i22].adminName,\n                      productId: res.materialLog[_i22].productId,\n                      productName: res.materialLog[_i22].productName,\n                      orderId: res.materialLog[_i22].orderId,\n                      createTime: ym.init.getDateTime(res.materialLog[_i22].createTime),\n                      materialDeductionList: function () {\n                        var _arr = [],\n                            productlogs = JSON.parse(res.materialLog[_i22].materialDeductionList);\n                        productlogs.forEach(function (_val) {\n                          _arr.push('名称：' + _val.bunkerName, '---扣减量：' + _val.deduraction + '---');\n                        });\n                        return _arr;\n                      }()\n                    });\n                  };\n\n                  //material logs\n                  for (var _i22 = 0; _i22 < res.materialLog.length; _i22++) {\n                    _loop(_i22);\n                  }\n\n                  break;\n\n                case \"machine_runtime_list\":\n                  // machine run time logs\n                  for (var _i23 = 0; _i23 < res.runtimeList.length; _i23++) {\n                    xml.push({\n                      runtimeId: res.runtimeList[_i23].runtimeId,\n                      machineSn: res.runtimeList[_i23].machineSn,\n                      machineNumber: res.runtimeList[_i23].machineNumber,\n                      machineType: it.StatusName.get('free').machineType.get(res.runtimeList[_i23].machineType),\n                      createTime: ym.init.getDateTime(res.runtimeList[_i23].createTime),\n                      endTime: res.runtimeList[_i23].endTime ? ym.init.getDateTime(res.runtimeList[_i23].endTime) : '无',\n                      limitShow: res.runtimeList[_i23].limitShow,\n                      status: it.StatusName.get('time').machineRun.get(res.runtimeList[_i23].status)\n                    });\n                  }\n\n                  break;\n\n                case \"draw_raffle_info_list\":\n                  // draw_raffle_info_list run time logs\n                  for (var _i24 = 0; _i24 < res.data.length; _i24++) {\n                    xml.push({\n                      drawId: res.data[_i24].drawId,\n                      title: res.data[_i24].title,\n                      startTime: res.data[_i24].startTime ? ym.init.getDateTime(res.data[_i24].startTime) : '无',\n                      endTime: res.data[_i24].endTime ? ym.init.getDateTime(res.data[_i24].endTime) : '无',\n                      raffleType: res.data[_i24].raffleType,\n                      limit: res.data[_i24].limit,\n                      status: res.data[_i24].status,\n                      raffleVersion: res.data[_i24].raffleVersion,\n                      itemCount: res.data[_i24].itemCount\n                    });\n                  }\n\n                  break;\n\n                case \"user_draw_raffle_log_list\":\n                  // draw_raffle_info_list run time logs\n                  for (var _i25 = 0; _i25 < res.data.length; _i25++) {\n                    xml.push({\n                      drawInstanceId: res.data[_i25].drawInstanceId,\n                      userId: res.data[_i25].userId,\n                      nickName: res.data[_i25].nickName,\n                      drawId: res.data[_i25].drawId,\n                      drawName: res.data[_i25].drawName,\n                      raffleVersion: res.data[_i25].raffleVersion,\n                      itemName: res.data[_i25].itemName,\n                      itemType: res.data[_i25].itemType,\n                      objectId: res.data[_i25].objectId,\n                      objectInstanceId: res.data[_i25].objectInstanceId,\n                      machineNumber: res.data[_i25].machineNumber,\n                      isMember: res.data[_i25].isMember,\n                      createTime: ym.init.getDateTime(res.data[_i25].createTime),\n                      status: res.data[_i25].status,\n                      hasAddress: res.data[_i25].hasAddress,\n                      addressId: res.data[_i25].addressId\n                    });\n                  }\n\n                  break;\n\n                case \"order_log_list\":\n                  // order_log_list order logs\n                  for (var _i26 = 0; _i26 < res.data.length; _i26++) {\n                    xml.push({\n                      orderId: res.data[_i26].orderId,\n                      userId: res.data[_i26].userId,\n                      nickName: res.data[_i26].nickName,\n                      machineNumber: res.data[_i26].machineNumber,\n                      orderMoney: parseFloat(res.data[_i26].orderMoney).toFixed(2),\n                      paymentMoney: parseFloat(res.data[_i26].paymentMoney).toFixed(2),\n                      orderType: res.data[_i26].orderType,\n                      paymentType: res.data[_i26].paymentType,\n                      paymentTime: res.data[_i26].paymentTime\n                    });\n                  }\n\n                  break;\n\n                case \"maintain_flow_log_list\":\n                  //maintenanceLogs \n                  for (var _i27 = 0; _i27 < res.data.length; _i27++) {\n                    xml.push({\n                      maintainFlowLogId: res.data[_i27].maintainFlowLogId,\n                      maintainerId: res.data[_i27].maintainerId,\n                      maintainerName: res.data[_i27].maintainerName,\n                      machineNumber: res.data[_i27].machineNumber,\n                      flowType: res.data[_i27].flowType,\n                      createTime: res.data[_i27].createTime,\n                      endTime: res.data[_i27].endTime,\n                      status: res.data[_i27].status\n                    });\n                  }\n\n                  break;\n\n                case \"machine_bunker_config_list\":\n                  //bunkerConf \n                  for (var _i28 = 0; _i28 < res.data.length; _i28++) {\n                    xml.push({\n                      bindMachine: res.data[_i28].bindMachine,\n                      bunkerConfigName: res.data[_i28].bunkerConfigName,\n                      createTime: ym.init.getDateTime(res.data[_i28].createTime),\n                      isSys: res.data[_i28].isSys == 1 ? '是' : '否',\n                      machineBunkerConfigId: res.data[_i28].machineBunkerConfigId,\n                      machineType: it.StatusName.get('free').machineType.get(res.data[_i28].machineType)\n                    });\n                  }\n\n                  break;\n\n                case \"sys_draw_raffle_info\":\n                  //sys_draw_raffle_info \n                  it.miniTurnableMore = false; //是否可以出现新增\n\n                  var _obj = {};\n                  Object.keys(res.data).forEach(function (element, index) {\n                    if (element == 'createTime' || element == 'updateTime') {\n                      _obj[element] = Object.values(res.data)[index] == -1 ? \"无\" : ym.init.getDateTime(Object.values(res.data)[index]);\n                    } else {\n                      _obj[element] = Object.values(res.data)[index] == -1 ? \"无\" : Object.values(res.data)[index];\n                    }\n                  });\n                  xml.push(_obj);\n                  res.pageCount = 1;\n                  break;\n\n                case \"sys_draw_item_info_list\":\n                  //add_or_update_sys_draw_item_info \n                  for (var _i29 = 0; _i29 < res.data.length; _i29++) {\n                    xml.push({\n                      isMember: res.data[_i29].isMember,\n                      itemId: res.data[_i29].itemId,\n                      itemName: res.data[_i29].itemName,\n                      itemPicUrl: res.data[_i29].itemPicUrl,\n                      itemType: res.data[_i29].itemType,\n                      probability: res.data[_i29].probability,\n                      sort: res.data[_i29].sort,\n                      status: res.data[_i29].status\n                    });\n                  }\n\n                  break;\n\n                case \"sys_user_draw_chance_list\":\n                  //sys_user_draw_chance_list \n                  for (var _i30 = 0; _i30 < res.data.length; _i30++) {\n                    // \n                    xml.push({\n                      chanceId: res.data[_i30].chanceId,\n                      drawChance: res.data[_i30].drawChance,\n                      luckyValue: res.data[_i30].luckyValue,\n                      nickName: res.data[_i30].nickName,\n                      userId: res.data[_i30].userId\n                    });\n                  }\n\n                  break;\n\n                case \"sys_user_draw_chance_log_list\":\n                  //sys_user_draw_chance_list \n                  for (var _i31 = 0; _i31 < res.data.length; _i31++) {\n                    // \n                    xml.push({\n                      chanceLogId: res.data[_i31].chanceLogId,\n                      createTime: ym.init.getDateTime(res.data[_i31].createTime),\n                      logContent: res.data[_i31].logContent,\n                      logType: res.data[_i31].logType,\n                      orderId: res.data[_i31].orderId,\n                      raffleVersion: res.data[_i31].raffleVersion,\n                      status: res.data[_i31].status,\n                      userId: res.data[_i31].userId,\n                      nickName: res.data[_i31].nickName\n                    });\n                  }\n\n                  break;\n\n                case \"sys_user_raffle_share_list\":\n                  //分享列表 \n                  for (var _i32 = 0; _i32 < res.data.length; _i32++) {\n                    // \n                    xml.push({\n                      raffleShareId: res.data[_i32].raffleShareId,\n                      newNickName: res.data[_i32].newNickName,\n                      newUserId: res.data[_i32].newUserId,\n                      originNickName: res.data[_i32].originNickName,\n                      originUserId: res.data[_i32].originUserId,\n                      orderId: res.data[_i32].orderId\n                    });\n                  }\n\n                  break;\n\n                case \"pre_sell_nape_log_list\":\n                  //预约活动列表 \n                  for (var _i33 = 0; _i33 < res.data.length; _i33++) {\n                    // \n                    xml.push({\n                      address: res.data[_i33].address,\n                      createTime: res.data[_i33].createTime,\n                      mobile: res.data[_i33].mobile,\n                      named: res.data[_i33].named,\n                      napeName: res.data[_i33].napeName,\n                      nickName: res.data[_i33].nickName,\n                      userId: res.data[_i33].userId,\n                      orderId: res.data[_i33].orderId,\n                      paymentMoney: res.data[_i33].paymentMoney,\n                      redeemCode: res.data[_i33].redeemCode,\n                      status: res.data[_i33].status,\n                      target: res.data[_i33].target,\n                      targetId: res.data[_i33].targetId,\n                      statusStr: res.data[_i33].statusStr,\n                      preSellLogId: res.data[_i33].preSellLogId\n                    });\n                  }\n\n                  break;\n\n                case \"sys_user_draw_log_list\":\n                  //抽奖记录列表 \n                  for (var _i34 = 0; _i34 < res.data.length; _i34++) {\n                    var _xml$push;\n\n                    // \n                    xml.push((_xml$push = {\n                      drawLogId: res.data[_i34].drawLogId,\n                      createTime: res.data[_i34].createTime,\n                      userId: res.data[_i34].userId,\n                      itemName: res.data[_i34].itemName\n                    }, _defineProperty(_xml$push, \"createTime\", res.data[_i34].createTime), _defineProperty(_xml$push, \"nickName\", res.data[_i34].nickName), _defineProperty(_xml$push, \"address\", res.data[_i34].address), _defineProperty(_xml$push, \"itemType\", res.data[_i34].itemType), _defineProperty(_xml$push, \"status\", res.data[_i34].status), _xml$push));\n                  }\n\n                  break;\n\n                case \"admin_statistics_list\": //新商户统计 \n\n                case \"machine_statistics_list\":\n                  //新设备统计 \n                  xml = res.data;\n                  break;\n\n                default:\n                  break;\n              }\n\n              it.total = parseInt(res.totalCount ? res.totalCount : res.pageCount * 20); //数据总条数\n              // it.currentPage = parseInt(res.pageCount); \n\n              it.tableData = xml;\n              setTimeout(function () {\n                it.loading = false;\n              }, 500);\n            }() : it.IError(res.statusCode.msg);\n          }\n        });\n      },\n      crud: function crud(arg) {\n        window.parent.document.getElementById('tagHref').setAttribute('src', \"../\".concat(arg.uri, \".html?[hash]\").concat(arg.enitId ? '*' + encodeURI(JSON.stringify(arg.enitId)) : '')); // 编辑带参数\n      },\n      //列表操作\n      //清单列表\n      listoperation: function listoperation(e) {\n        var it = this;\n\n        switch (e._tag) {\n          case 'manage_prodcut_list_list':\n            switch (e._type) {\n              case \"A\":\n                _data['type'] = 6;\n                _data['machineType'] = e._evt.machineType;\n                _data['name'] = e._evt.name;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.InputAndVisible = false;\n                        it.list(); //刷新列表\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"S\":\n                _data['type'] = 2;\n                _data['page'] = 1;\n                _data['listId'] = e._evt.listId;\n                it.listId = e._evt.listId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      it.TableFormData = [];\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        res.productShowList.forEach(function (element) {\n                          it.TableFormData.push({\n                            productId: element.productId,\n                            productName: element.productName,\n                            productPrice: parseFloat(element.productPrice / 100).toFixed(2),\n                            formulaName: element.formulaName,\n                            bunkerNumber: element.bunkerNumber,\n                            createTime: ym.init.getDateTime(element.createTime).split(' ')[0],\n                            productRank: element.productRank,\n                            machineType: it.StatusName.get('free').machineType.get(element.machineType)\n                          });\n                        });\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"E\":\n                _data['type'] = 3;\n                _data['listId'] = it.listId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      it.UpdateTableFormData = [];\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        res.productInfoList.forEach(function (element, index) {\n                          it.UpdateTableFormData.push({\n                            productId: element.productId,\n                            productName: element.productName,\n                            productPrice: parseFloat(element.productPrice / 100).toFixed(2),\n                            productPicurl: element.productPicurl,\n                            formulaName: element.formulaName,\n                            bunkerNumber: element.bunkerNumber,\n                            createTime: ym.init.getDateTime(element.createTime).split(' ')[0],\n                            productRank: element.productRank,\n                            machineType: it.StatusName.get('free').machineType.get(element.machineType),\n                            productComment: element.productComment\n                          });\n\n                          if (res.productIdList) {\n                            res.productIdList.forEach(function (e) {\n                              if (e == element.productId) {\n                                it.$nextTick(function () {\n                                  it.tableChecked(index); //每次更新了数据，触发这个函数即可。\n                                });\n                              }\n                            });\n                          }\n\n                          ;\n                        });\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"P\":\n                //编辑清单\n                _data['type'] = 4;\n                _data['listId'] = it.listId;\n                _data['productId'] = it.productId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      it.UpdateTableFormData = [];\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.UpdateTableAndVisible = false;\n                        it.listoperation({\n                          _tag: 'manage_prodcut_list_list',\n                          _evt: {\n                            listId: it.listId\n                          },\n                          _type: 'S'\n                        }); //刷新列表\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"D\":\n                _data['type'] = 5;\n                _data['listId'] = e._evt.listId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: true,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.list(); //刷新列表\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              default:\n                break;\n            }\n\n            break;\n\n          case 'manage_advertisement_list_list':\n            //machine vedio detail list\n            switch (e._type) {\n              case \"A\":\n                _data['type'] = 6;\n                _data['name'] = e._evt.name;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.InputAndVisible = false;\n                        delete _data['name'];\n                        it.list(); //刷新列表\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"S\":\n                _data['type'] = 2;\n                _data['page'] = 1;\n                _data['listId'] = e._evt.listId;\n                it.listId = e._evt.listId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      it.TableFormData = [];\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        res.advertisementList.forEach(function (element) {\n                          it.TableFormData.push({\n                            madId: element.madId,\n                            madOrder: element.madOrder,\n                            // madSize: element.madSize,  //视频大小\n                            madStatus: element.madStatus ? '上架' : '下架',\n                            madTime: ym.init.getDateTime(element.madTime).split(' ')[0],\n                            madTitle: element.madTitle,\n                            // madType: element.madType,  //广告类型\n                            madUrl: element.madUrl\n                          });\n                        });\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"E\":\n                _data['type'] = 3;\n                _data['listId'] = it.listId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      it.UpdateTableFormData = [];\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        res.advertisementInfoList.forEach(function (element, index) {\n                          it.UpdateTableFormData.push({\n                            madId: element.madId,\n                            madOrder: element.madOrder,\n                            // madSize: element.madSize,\n                            madStatus: element.madStatus ? '上架' : '下架',\n                            madTime: ym.init.getDateTime(element.madTime).split(' ')[0],\n                            madTitle: element.madTitle,\n                            // madType: element.madType,\n                            madUrl: element.madUrl\n                          });\n\n                          if (res.adIdList) {\n                            res.adIdList.forEach(function (e) {\n                              if (e == element.madId) {\n                                it.$nextTick(function () {\n                                  it.tableChecked(index); //每次更新了数据，触发这个函数即可。\n                                });\n                              }\n                            });\n                          }\n\n                          ;\n                        });\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"P\":\n                //编辑清单\n                _data['type'] = 4;\n                _data['listId'] = it.listId;\n                _data['adId'] = it.adIds;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      it.UpdateTableFormData = [];\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.UpdateTableAndVisible = false;\n                        it.listoperation({\n                          _tag: 'manage_advertisement_list_list',\n                          _evt: {\n                            listId: it.listId\n                          },\n                          _type: 'S'\n                        }); //刷新列表\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              case \"D\":\n                _data['type'] = 5;\n                _data['listId'] = e._evt.listId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + uri,\n                  async: true,\n                  xmldata: _data,\n                  done: function done(res) {\n                    try {\n                      ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.list(); //刷新列表\n                      }() : function () {\n                        throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                      }();\n                    } catch (error) {\n                      it.IError(error);\n                    }\n                  }\n                });\n                break;\n\n              default:\n                break;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      },\n      handleSelectionChange: function handleSelectionChange(val) {\n        var _this3 = this;\n\n        //下拉选项\n        this.multipleSelection = val;\n        this.productCount = val.length;\n        if (uri == 'manage_prodcut_list_list') return false; //阻止继续渲染清单的操作\n\n        this.productId = [];\n        this.adIds = [];\n        this.machineNumber = [];\n        this.adminIds = [];\n        this.userMode = [];\n        val.forEach(function (e) {\n          _this3.productId.push(e.productId || []);\n\n          _this3.machineNumber.push(e.machineNumber || []); //机器编号数组\n\n\n          _this3.adminIds.push(e.adminId || []);\n\n          _this3.adIds.push(e.madId || []);\n\n          e.userId != \"无\" ? _this3.userIdts.push(e.userId) : null;\n\n          _this3.userMode.push(e || []); //批量操作用户类型\n\n        });\n      },\n      filterTag: function filterTag(value, row) {\n        return row.machineType === value;\n      },\n      tableChecked: function tableChecked(e) {\n        this.$refs.multipleTable.toggleRowSelection(this.UpdateTableFormData[e], true);\n      },\n      searchAPIs: function searchAPIs(_v) {\n        var _this4 = this;\n\n        //查找API\n        var it = this;\n\n        switch (_v._uri) {\n          case 'manage_machine_product_relation':\n            //清单的绑定解绑\n            if (_v._type == 4) {\n              //针对料仓配置绑定的机器查询\n              _data['adminId'] = _v._id;\n              delete _data['page'];\n              delete _data['listId'];\n              delete _data['type'];\n              delete _data['machineNumber'];\n              ym.init.XML({\n                method: 'GET',\n                uri: token._j.URLS.Development_Server_ + 'find_admin_machine',\n                //查询绑定关系\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  it.UnFormData = [];\n                  res.data.forEach(function (_params_) {\n                    it.UnFormData.push({\n                      machineNumber: _params_.machineNumber,\n                      listName: _params_.listName,\n                      machineType: it.StatusName.get('free').machineType.get(_params_.machineType)\n                    });\n                  });\n                }\n              });\n              return false;\n            }\n\n            _v._type.forEach(function (e) {\n              if (e == 6) e = 4; //暂时解决产品清单绑定问题\n\n              _data['type'] = e;\n              _data['adminId'] = _v._id || '';\n              _data['listId'] = _v._listid || '';\n              _data['machineNumber'] = _this4.machineNumber || [];\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + _v._uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      console.log(res);\n\n                      switch (e) {\n                        case 1:\n                          it.listIds = [];\n                          res.productListList.forEach(function (data) {\n                            it.listIds.push({\n                              value: data.listId,\n                              label: data.listName\n                            });\n                          });\n                          break;\n\n                        case 2:\n                          it.adminIds = [];\n                          res.userList.forEach(function (data) {\n                            it.adminIds.push({\n                              value: data.adminId,\n                              label: data.adminName\n                            });\n                          });\n                          break;\n\n                        case 3:\n                          it.UnFormData = [];\n\n                          for (var i = 0; i < res.machineNumberList.length; i++) {\n                            it.UnFormData.push({\n                              listId: res.machineNumberList[i].listId,\n                              listName: res.machineNumberList[i].listName,\n                              machineNumber: res.machineNumberList[i].machineNumber,\n                              machineType: res.machineNumberList[i].machineType\n                            });\n                          }\n\n                          break;\n\n                        default:\n                          it.ISuccessfull(res.statusCode.msg);\n                          it.detailTableAndVisible = false;\n                          break;\n                      }\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n            });\n\n            break;\n\n          case 'get_machine_number_arr':\n            //绑定推送/解绑 \n            _data['name'] = ''; //处理name 缓存\n\n            this.userIds = []; //处理name 缓存\n\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _v._uri,\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                res.list.forEach(function (e) {\n                  _data['machineNumber'] = e;\n                  ym.init.XML({\n                    method: 'GET',\n                    uri: token._j.URLS.Development_Server_ + 'statistics_user_list',\n                    //查询绑定关系\n                    async: false,\n                    xmldata: _data,\n                    done: function done(res) {\n                      var uname = \"无\",\n                          uid = \"无\";\n                      res.statusCode.status != '4444' ? res.userList.forEach(function (arr) {\n                        uname = arr.nickName;\n                        uid = arr.userId;\n                      }) : null;\n                      it.UnFormData.push({\n                        machineNumber: e,\n                        userName: uname,\n                        userId: uid\n                      });\n                    }\n                  });\n                });\n              }\n            });\n            break;\n\n          case 'manage_advertisement_list_relation':\n            //广告视频清单\n            _v._type.forEach(function (e) {\n              _data['type'] = e;\n              _data['adminId'] = it.adminIds || [];\n              _data['listId'] = _v._listid || '';\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + _v._uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      switch (e) {\n                        case 1:\n                          it.listIds = [];\n                          res.advertisementListList.forEach(function (data) {\n                            it.listIds.push({\n                              value: data.listId,\n                              label: data.listName\n                            });\n                          });\n                          break;\n\n                        case 2:\n                          it.UnFormData = [];\n                          res.userList.forEach(function (data) {\n                            it.UnFormData.push({\n                              adminId: data.adminId,\n                              adListId: data.adListId,\n                              listName: data.listName,\n                              adminName: data.adminName\n                            });\n                          });\n                          break;\n\n                        default:\n                          it.ISuccessfull(res.statusCode.msg);\n                          it.detailTableAndVisible = false;\n                          break;\n                      }\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n            });\n\n            break;\n\n          case 'find_user_milliliter_log':\n            //用户列表的毫升数日志\n            delete _data['type'];\n            _data['userId'] = _v._id;\n            _data['page'] = 1;\n            _data['start'] = '';\n            _data['end'] = '';\n            ym.init.XML({\n              method: 'GET',\n              uri: token._j.URLS.Development_Server_ + 'find_user_milliliter_log',\n              //查询绑定关系\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                res.logList.forEach(function (e) {\n                  it.TableFormData.push({\n                    logId: e.logId,\n                    userId: e.userId,\n                    userName: e.userName,\n                    createTime: e.createTime,\n                    milliliterChange: e.milliliterChange,\n                    stateComment: e.stateComment\n                  });\n                });\n              }\n            });\n            break;\n\n          case 'find_user_couponList':\n            //用户列表的毫升数日志\n            _data['userId'] = _v._id;\n            _data['page'] = 1;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + 'find_user_couponList',\n              //查询绑定关系\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                res.logList.forEach(function (e) {\n                  it.TableFormData.push({\n                    logId: e.logId,\n                    userId: e.userId,\n                    userName: e.userName,\n                    createTime: e.createTime,\n                    milliliterChange: e.milliliterChange,\n                    stateComment: e.stateComment\n                  });\n                });\n              }\n            });\n            break;\n\n          default:\n            break;\n        }\n      },\n      querySearchAsync: function querySearchAsync(queryString, cb) {\n        //动态查询用户\n        var it = this;\n        _data['type'] = 1;\n        _data['name'] = queryString || '拉';\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'find_user_for_bind',\n          //查询绑定关系\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            var _arr = [];\n            res.list ? res.list.forEach(function (e) {\n              _arr.push({\n                value: e.nickName,\n                _id: e.userId\n              });\n            }) : it.IError(res.statusCode.msg);\n            it.UnFormData = res.list; //用户批量操作\n\n            var results = queryString ? _arr.filter(it.createStateFilter(queryString)) : _arr;\n            clearTimeout(it.timeout);\n            it.timeout = setTimeout(function () {\n              cb(results);\n            }, 3000 * Math.random());\n          }\n        });\n      },\n      createStateFilter: function createStateFilter(queryString) {\n        return function (state) {\n          return state.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n        };\n      },\n      handleSelect: function handleSelect(item) {\n        //取得选择的用户ID\n        this.userIds = item._id; //this.UserTableData.push(item); //用户批量操作\n      },\n      bindUser: function bindUser(e) {\n        //执行绑定/解绑\n        var it = this;\n\n        switch (e._uri) {\n          case 'client_user_list':\n            e._session != '' ? null : it.IError('缺少参数！');\n\n            var _sess = JSON.parse(e._session);\n\n            switch (_sess._uri) {\n              case 'manage_client_user':\n                _data['userType'] = it.user_type; //用户类型\n\n                _data['type'] = _sess._type; //用户\n\n                it.userMode.forEach(function (_evnt) {\n                  _data['userId'] = _evnt.userId;\n                  _data['nickName'] = _evnt.nickName;\n                  ym.init.XML({\n                    method: 'POST',\n                    uri: token._j.URLS.Development_Server_ + _sess._uri,\n                    async: false,\n                    xmldata: _data,\n                    done: function done(res) {\n                      it.detailTableAndVisible = false;\n                      it.ISuccessfull(res.statusCode.msg);\n                    }\n                  });\n                });\n                delete _data['userType'];\n                delete _data['userId'];\n                delete _data['nickName'];\n                it.list(); //刷新列表\n\n                break;\n\n              case 'grant_compensate_milliliter':\n                //补偿流量\n                //grant_compensate_milliliter\n                _data['grantCount'] = it.grantCount;\n                _data['overdueTime'] = it.overdueTime;\n                _data['type'] = _sess._type; //用户\n\n                it.userMode.forEach(function (_evnt) {\n                  _data['userId'] = _evnt.userId;\n                  _data['nickName'] = _evnt.nickName;\n                  ym.init.XML({\n                    method: 'GET',\n                    uri: token._j.URLS.Development_Server_ + _sess._uri,\n                    async: false,\n                    xmldata: _data,\n                    done: function done(res) {\n                      it.detailTableAndVisible = false;\n                      it.ISuccessfull(res.statusCode.msg);\n                    }\n                  });\n                });\n                delete _data['grantCount'];\n                delete _data['overdueTime'];\n                it.list(); //刷新列表\n\n                break;\n\n              case 'grant_sys_user_draw_chance':\n                //小程序大转盘 赠送抽奖次数\n                _data['grantCount'] = it.ount;\n                it.userMode.forEach(function (_evnt) {\n                  _data['userId'] = _evnt.userId;\n                  ym.init.XML({\n                    method: 'GET',\n                    uri: token._j.URLS.Development_Server_ + _sess._uri,\n                    async: false,\n                    xmldata: _data,\n                    done: function done(res) {\n                      it.detailTableAndVisible = false;\n                      it.ISuccessfull(res.statusCode.msg);\n                    }\n                  });\n                });\n                delete _data['grantCount'];\n                delete _data['name'];\n                delete _data['userId'];\n                it.list(); //刷新列表\n\n                break;\n\n              case 'dredge_member':\n                //后台开通会员\n                _data['memberRuleId'] = it.objectId;\n                it.userMode.forEach(function (_evnt) {\n                  _data['userId'] = _evnt.userId;\n                  ym.init.XML({\n                    method: 'GET',\n                    uri: token._j.URLS.Development_Server_ + _sess._uri,\n                    async: false,\n                    xmldata: _data,\n                    done: function done(res) {\n                      it.detailTableAndVisible = false;\n                      it.ISuccessfull(res.statusCode.msg);\n                    }\n                  });\n                });\n                delete _data['memberRuleId'];\n                delete _data['userId'];\n                it.list(); //刷新列表\n\n                break;\n\n              default:\n                //赠送抽奖次数 （1.0版本赠送）\n                _data['grantCount'] = it.ount;\n                it.userMode.forEach(function (_evnt) {\n                  _data['userId'] = _evnt.userId;\n                  ym.init.XML({\n                    method: 'POST',\n                    uri: token._j.URLS.Development_Server_ + _sess._uri,\n                    async: false,\n                    xmldata: _data,\n                    done: function done(res) {\n                      it.detailTableAndVisible = false;\n                      it.ISuccessfull(res.statusCode.msg);\n                    }\n                  });\n                });\n                delete _data['grantCount'];\n                break;\n            }\n\n            break;\n\n          case 'batch_free_user':\n            _data['type'] = 2;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + 'batch_free_user',\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                it.detailTableAndVisible = false;\n                it.ISuccessfull(res.statusCode.msg);\n              }\n            });\n            break;\n\n          default:\n            _data['machineNumber'] = this.machineNumber;\n            _data['type'] = e._type;\n            _data['userIds'] = e._id ? this.userIdts : this.userIds;\n            ym.init.XML({\n              method: 'GET',\n              uri: token._j.URLS.Development_Server_ + e._uri,\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                it.detailTableAndVisible = false;\n                it.ISuccessfull(res.statusCode.msg);\n              }\n            });\n            break;\n        }\n      },\n      machineLog: function machineLog(e) {\n        var it = this;\n        delete _data['page'];\n        _data['type'] = 5;\n        _data['machineNumber'] = e.enitId.machineNumber;\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'manage_machine',\n          async: true,\n          xmldata: _data,\n          done: function done(res) {\n            res.machineFaultList.forEach(function (arr) {\n              it.machineLogs.push({\n                i: ym.init.getDateTime(arr.faultTime),\n                t: arr.faultContent\n              });\n            });\n          }\n        });\n      },\n      fileChange: function fileChange(e) {\n        //上传结构\n        _data['type'] = 4;\n        _data['mUpdateVersion'] = this.formData.mUpdateVersion;\n      },\n      filemadUrlChange: function filemadUrlChange(e) {\n        _data['type'] = 9;\n      },\n      fileExceed: function fileExceed() {\n        this.IError('只允许单个上传');\n      },\n      machineSceneSuccess: function machineSceneSuccess(e) {\n        this.formData.mUpdateUrl = e.realPath; // 应用地址\n\n        this.formData.madUrl = e.realPath; //视频地址\n      },\n      handleRemove: function handleRemove(file, fileList) {\n        console.log(file, fileList);\n      },\n      handlePictureCardPreview: function handlePictureCardPreview(file) {\n        //点击查看放大的时候\n        this.dialogVisible = true;\n        this.dialogImageUrl = 'http://www.cbcoffee.cn/rundev/manage/images/Android.svg';\n      },\n      machineVersion: function machineVersion(_idata) {\n        var it = this;\n        _data['type'] = _idata._type;\n        _data['machineType'] = _idata._machineType;\n        _data['mUpdateVersion'] = _idata._d.mUpdateVersion;\n        _data['versionCode'] = _idata._d.versionCode;\n        _data['mUpdateDes'] = _idata._d.mUpdateDes;\n        _data['mUpdateUrl'] = this.formData.mUpdateUrl;\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + _idata._uri,\n          async: true,\n          xmldata: _data,\n          done: function done(res) {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              it.detailTableAndVisible = false;\n              it.list();\n            }() : it.IError(res.statusCode.msg);\n          }\n        });\n      },\n      deleteData: function deleteData(_del) {\n        //删除操作\n        var it = this;\n\n        switch (_del._uri) {\n          case \"manage_poi\":\n            _data['poiIds'] = _del._delete.poiId;\n            _data['type'] = _del._type;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _del._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.ISuccessfull(res.statusCode.msg);\n                  it.list();\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n            break;\n\n          case 'manage_machine_advertisement':\n            _data['madId'] = _del._parameter;\n            _data['type'] = _del._type;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _del._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.ISuccessfull(res.statusCode.msg);\n                  it.list();\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n            break;\n\n          case 'manage_coupon':\n            _data['couponId'] = _del._parameter;\n            _data['type'] = _del._type;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _del._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.ISuccessfull(res.statusCode.msg);\n                  it.list();\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n            break;\n\n          default:\n            break;\n        }\n      },\n      addEventData: function addEventData(_event) {\n        //添加视频广告///优惠券赠送\n        var it = this;\n\n        switch (_event._uri) {\n          case 'manage_machine_advertisement':\n            _data['madOrder'] = _event._parameter.madOrder;\n            _data['madTitle'] = _event._parameter.madTitle;\n            _data['madUrl'] = _event._parameter.madUrl;\n            _data['type'] = _event._type;\n\n            if (it.formData.madId) {\n              _data['madId'] = it.formData.madId;\n              _data['type'] = 4;\n            }\n\n            ;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _event._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.ISuccessfull(res.statusCode.msg);\n                  it.adevtmodel = false;\n                  it.list();\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n            break;\n\n          case 'manage_coupon':\n            //赠送优惠券\n            _data['grantCount'] = _event._parameter;\n            _data['couponId'] = it.unbinadmin.couponId;\n            _data['userId'] = [];\n            it.userMode.forEach(function (e) {\n              _data['userId'].push(e.userId); //用户ID\n\n            });\n            _data['type'] = _event._type;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _event._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.ISuccessfull(res.statusCode.msg);\n                  it.detailTableAndVisible = false;\n                  delete _data['name'];\n                  delete _data['grantCount'];\n                  delete _data['couponId'];\n                  delete _data['userId'];\n                  it.list();\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n            break;\n\n          default:\n            break;\n        }\n      },\n      enitEventData: function enitEventData(_event) {\n        var it = this;\n\n        switch (_event._uri) {\n          case 'manage_machine_advertisement':\n            if (!_event.hasOwnProperty('_status')) {\n              _data['madId'] = _event._parameter;\n              _data['type'] = _event._type;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + _event._uri,\n                async: true,\n                xmldata: _data,\n                done: function done(res) {\n                  ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                    it.imageList.madUrl = []; // 先清空视频地址列表\n\n                    it.ISuccessfull(res.statusCode.msg);\n                    it.formData.madTitle = res.machineAdvertisementInfo.madTitle;\n                    it.formData.madUrl = res.machineAdvertisementInfo.madUrl;\n                    it.formData.madOrder = res.machineAdvertisementInfo.madOrder;\n                    it.formData.madId = res.machineAdvertisementInfo.madId;\n                    it.imageList.madUrl.push({\n                      name: 'madUrl',\n                      url: res.machineAdvertisementInfo.madUrl\n                    });\n                  }() : it.IError(res.statusCode.msg);\n                }\n              });\n            } else {\n              //madStatus\n              _data['madId'] = _event._parameter;\n              _data['type'] = _event._type;\n              _data['madStatus'] = +!_event._status;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + _event._uri,\n                async: true,\n                xmldata: _data,\n                done: function done(res) {\n                  ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                    delete _data['madId'];\n                    delete _data['madStatus'];\n                    it.list();\n                  }() : it.IError(res.statusCode.msg);\n                }\n              });\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      },\n      userSelect: function userSelect(_event) {\n        //用户批量操作\n        _event = JSON.parse(_event);\n        var it = this;\n\n        switch (_event._uri) {\n          case 'manage_client_user':\n            if (_event._type == 2) {\n              //更改用户类型 \n              it.statues.user = true;\n              it.statues.state = false;\n              it.statues.flow = false;\n              it.statues.ount = false;\n              it.statues.objectId = false;\n            } else {\n              //更改用户状态\n              it.statues.user = false;\n              it.statues.state = true;\n              it.statues.flow = false;\n              it.statues.ount = false;\n              it.statues.objectId = false;\n            }\n\n            break;\n\n          case 'grant_compensate_milliliter':\n            //更改用户毫升数\n            it.statues.user = false;\n            it.statues.state = false;\n            it.statues.flow = true;\n            it.statues.ount = false;\n            it.statues.objectId = false;\n            break;\n\n          case 'dredge_member':\n            //后台开通会员-- 查询会员\n            it.statues.user = false;\n            it.statues.state = false;\n            it.statues.flow = false;\n            it.statues.ount = false;\n            it.statues.objectId = true;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + 'get_member_list',\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                try {\n                  ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                    setTimeout(function () {\n                      it.objectIds = [];\n                      res.memberRuleList.forEach(function (key, index) {\n                        it.objectIds.push({\n                          memberRuleId: key.memberRuleId,\n                          memberRuleName: \"ID\\uFF1A\".concat(key.memberRuleId, \"   \\u540D\\u79F0\\uFF1A\").concat(key.memberRuleName)\n                        });\n                      });\n                    }, 500);\n                  }() : function () {\n                    throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                  }();\n                } catch (error) {\n                  it.IError(error);\n                }\n              }\n            });\n            break;\n\n          default:\n            //赠送抽奖次数\n            it.statues.user = false;\n            it.statues.state = false;\n            it.statues.ount = true;\n            it.statues.flow = false;\n            it.statues.objectId = false;\n            break;\n        }\n      },\n      statusVip: function statusVip(e) {\n        // 更改会员状态\n        var it = this;\n        _data['memberId'] = e;\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'change_member_status',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      orderDetail: function orderDetail(e) {\n        //订单详情\n        var it = this;\n        _data['orderId'] = e;\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'order_detail',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.order = {};\n                it.order.orderId = res.detail.orderId;\n                it.order.userId = res.detail.userId;\n                it.order.nickName = res.detail.nickName;\n                it.order.headPicUrl = res.detail.headPicUrl;\n                it.order.machineNumber = res.detail.machineNumber;\n                it.order.machineType = res.detail.machineType;\n                it.order.adminId = res.detail.adminId;\n                it.order.adminName = res.detail.adminName;\n                it.order.paymentType = res.detail.paymentType;\n                it.order.spendingMoney = res.detail.spendingMoney;\n                it.order.paymentMoney = res.detail.paymentMoney;\n                it.order.productId = res.detail.productId;\n                it.order.productName = res.detail.productName;\n                it.order.flavorShow = JSON.stringify(res.detail.flavorShow);\n                it.order.couponName = res.detail.couponName;\n                it.order.consumptionType = res.detail.consumptionType;\n                it.order.orderStatus = res.detail.orderStatus;\n                it.order.redeemCode = res.detail.redeemCode;\n                it.order.paymentTime = res.detail.paymentTime;\n                it.order.createTime = res.detail.createTime;\n                it.order.orderType = res.detail.orderType;\n                it.order.refundId = res.detail.refundId;\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      refundMoneyNum: function refundMoneyNum(_event) {\n        //order_refund  订单退款\n        var it = this;\n        it.loading = true;\n        _data['orderId'] = _event.orderId;\n        _data['refundLimit'] = parseFloat(_event.payNum * 100).toFixed(0) || 0;\n        _data['milliliterLimit'] = _event.milliliterLimit || '';\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'order_refund',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.InputAndVisible = false;\n                setTimeout(function () {\n                  it.loading = false;\n                  it.list();\n                }, 500);\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      exportOrder: function exportOrder(_event) {\n        // 订单导出 excel\n        var it = this;\n        it.loading = true;\n        _data['name'] = JSON.stringify({\n          machineNumber: _event.machineNumber || '',\n          adminName: _event.adminName || '',\n          productName: _event.productName || '',\n          couponName: _event.couponName || ''\n        });\n        _data['consumptionType'] = _event.consumptionType || '';\n        _data['orderStatus'] = _event.orderStatus || '';\n        _data['startTime'] = it.optionsTime[0] || '';\n        _data['endTime'] = it.optionsTime[1] || '';\n        _data['orderLine'] = _event.orderLine || '';\n        _data['sort'] = _event.sort || '';\n        _data['orderType'] = _event.orderType || '';\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'export_order_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                setTimeout(function () {\n                  it.loading = false;\n                }, 500);\n                location.href = token._j.URLS.Development_Server_ + res.path;\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      exportPushOrder: function exportPushOrder(_event) {\n        // 资金管理导出 excel\n        var it = this;\n        it.loading = true;\n        _data['orderId'] = _event.consumptionType || '';\n        _data['machineNumber'] = _event.orderStatus || '';\n        _data['startTime'] = it.optionsTime[0] || '';\n        _data['endTime'] = it.optionsTime[1] || '';\n        _data['adminName'] = _event.orderLine || '';\n        _data['userId'] = _event.sort || '';\n        _data['orderType'] = _event.orderType || '';\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'export_order_log_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                setTimeout(function () {\n                  it.loading = false;\n                }, 500);\n                location.href = token._j.URLS.Development_Server_ + res.path;\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      getTime: function getTime(_event) {\n        //时间区间\n        this.optionsTime[0] = ym.init.getDateTime(_event[0]);\n        this.optionsTime[1] = ym.init.getDateTime(_event[1]);\n      },\n      submit: function submit(_event) {\n        var _type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'POST';\n\n        var it = this;\n\n        if (_event.en == 'pull') {\n          //编辑\n          if (_event.d) {\n            _data['maintainerId'] = _event.d;\n            _type = 'GET';\n          } else {\n            if (_event.unbinadmin.secc) {\n              //执行不同的操作\n              _data['operaType'] = 2;\n              _data['operaVal'] = _event.unbinadmin.secc;\n            } else if (_event.unbinadmin.bindMachine) {\n              _data['operaType'] = 5;\n              _data['operaVal'] = _event.unbinadmin.bindMachine;\n            } else {\n              _data['operaType'] = 4;\n              _data['operaVal'] = it.userIds;\n            }\n          }\n        } else {\n          //添加\n          _data['maintainerName'] = _event.formData.maintainerName || '';\n          _data['maintainerPhone'] = _event.formData.maintainerPhone || '';\n          _data['password'] = _event.formData.password || '';\n          _data['userId'] = it.userIds;\n        }\n\n        ym.init.XML({\n          method: _type,\n          uri: token._j.URLS.Development_Server_ + _event.uri,\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                if (_event.en == 'pull' && _event.d) {\n                  it.unbinadmin.maintainerName = res.maintainer.maintainerName;\n                  it.unbinadmin.maintainerPhone = res.maintainer.maintainerPhone; // it.unbinadmin.secc = res.maintainer.maintainerStatus;\n\n                  it.unbinadmin.bindMachine = res.maintainer.bindMachine == -1 ? '' : res.maintainer.bindMachine;\n                  it.unbinadmin.state = res.maintainer.nickName != '无' ? res.maintainer.nickName : '';\n                  it.userIds = res.maintainer.userId;\n                } else {\n                  it.ISuccessfull(res.statusCode.msg);\n                  delete _data['name'];\n                  setTimeout(function () {\n                    it.TableAndVisible = false;\n                    it.detailTableAndVisible = false;\n                    it.loading = false;\n                  }, 500);\n                  it.list();\n                }\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      adminSubmit: function adminSubmit(_event) {\n        //超级管理员\n        var it = this;\n\n        if (_event.en == \"pull\") {\n          _data['type'] = 1;\n          _data['toAdminId'] = _event._d;\n        } else {\n          _data['type'] = 5;\n\n          if (it.bool != '') {\n            delete _data['toAdminId'];\n            delete _data['page'];\n            _data['adminToken'] = it.bool.adminToken;\n            _data['type'] = 6;\n            _data['registerTime'] = it.bool.registerTime;\n            _data['manageId'] = it.bool.manageId;\n            _data['adminStatus'] = it.bool.adminStatus;\n            _data['adminId'] = it.bool.adminId;\n          }\n\n          ;\n          _data['adminName'] = _event.formData.adminName;\n          _data['adminPwd'] = _event.formData.adminPwd;\n          _data['roleId'] = _event.formData.roleId;\n          _data['realName'] = _event.formData.realName;\n          _data['adminMobile'] = _event.formData.adminMobile;\n          _data['userId'] = it.userIds;\n          _data['named'] = _event.formData.named;\n        }\n\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + _event.uri,\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                if (_event.en == 'pull' && _event._d) {\n                  it.formData.adminName = res.adminUser.adminName;\n                  it.formData.adminPwd = res.adminUser.adminPwd;\n                  it.formData.roleId = res.adminUser.roleId;\n                  it.formData.realName = res.adminUser.realName;\n                  it.formData.adminMobile = res.adminUser.adminMobile;\n                  it.formData.named = res.adminUser.named;\n                  it.formData.state = res.adminUser.nickName != '无' ? res.adminUser.nickName : '';\n                  it.userIds = res.adminUser.userId != -1 ? res.adminUser.userId : [];\n                  it.bool = {\n                    adminToken: res.adminUser.adminToken || '',\n                    registerTime: ym.init.getDateTime(res.adminUser.registerTime) || '',\n                    manageId: res.adminUser.manageId || '',\n                    adminStatus: res.adminUser.adminStatus || '',\n                    adminId: res.adminUser.adminId\n                  };\n                } else {\n                  it.ISuccessfull(res.statusCode.msg);\n                  delete _data['roleId'];\n                  delete _data['adminName'];\n                  delete _data['adminId'];\n                  delete _data['realName'];\n                  setTimeout(function () {\n                    it.TableAndVisible = false;\n                    it.detailTableAndVisible = false;\n                    it.loading = false;\n                  }, 500);\n                  it.list();\n                }\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      showtruntablelogs: function showtruntablelogs(params) {\n        //转盘记录\n        console.log(params);\n        var it = this;\n        _data['addressId'] = params;\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'user_address_detail',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.UnFormData.push({\n                  userId: res.data.userId,\n                  named: res.data.named,\n                  phone: res.data.phone,\n                  province: res.data.province,\n                  city: res.data.city,\n                  district: res.data.district,\n                  address: res.data.address,\n                  createTime: res.data.createTime\n                });\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      exportTurntableUserLogs: function exportTurntableUserLogs(params) {\n        //导出用户抽奖记录\n        var it = this;\n        _data['userId'] = params.userId || '';\n        _data['drawInstanceId'] = params.drawInstanceId || '';\n        _data['drawId'] = params.drawId || '';\n        _data['drawName'] = params.drawName || '';\n        _data['raffleVersion'] = params.raffleVersion || '';\n        _data['itemName'] = params.itemName || '';\n        _data['itemType'] = params.itemType || '';\n        _data['status'] = params.status || '';\n        _data['hasAddress'] = params.hasAddress || '';\n\n        if (params.startTime > 1) {\n          _data['startTime'] = ym.init.getDateTime(params.startTime[0]) || '';\n          _data['endTime'] = ym.init.getDateTime(params.startTime[1]) || '';\n        }\n\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'export_user_draw_raffle_log_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                location.href = token._j.URLS.Development_Server_ + res.path;\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      //查询运维流程详情\n      machineMaintenance: function machineMaintenance(params) {\n        var it = this;\n        _data['maintainerId'] = params.maintainerId;\n        _data['maintainFlowId'] = params.maintainFlowLogId;\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'maintain_question_log_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.UnFormData = [];\n                res.data.forEach(function (element) {\n                  it.UnFormData.push({\n                    question: element.question,\n                    answerPic: element.answerPic,\n                    answer: function () {\n                      var _code = element.answer.split('$')[0],\n                          _code_ = '';\n                      element.answer.split('$')[0].includes('{') ? void function () {\n                        Object.keys(JSON.parse(_code)).forEach(function (element, index) {\n                          if (Object.keys(JSON.parse(_code)).length <= 2) {\n                            _code_ = \"\\u6599\\u4ED3\\uFF1A\".concat(Object.values(JSON.parse(_code))[0], \",\\u574F\\u6599\\uFF1A\").concat(Object.values(JSON.parse(_code))[1]);\n                          } else {\n                            // _code_ += ` 【 料仓：${index + 1}, 数值：${Object.values(JSON.parse(_code))[index]} 】 `;\n                            _code_ += \"\\u3010 \".concat(index + 1, \"\\u3001\").concat(Object.keys(JSON.parse(_code))[index].split('g')[0], \"\\uFF1A\").concat(Object.values(JSON.parse(_code))[index], \" g \\u3011 \");\n                          }\n                        });\n                        _code = _code_;\n                      }() : null;\n                      return _code;\n                    }()\n                  });\n                });\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      //查看料仓配置\n      machineBunkerConfig: function machineBunkerConfig(params, enitBunkerConf) {\n        var it = this;\n        _data['machineBunkerConfigId'] = params.machineBunkerConfigId;\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'machine_bunker_config',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.TableFormData = [];\n                it.formData.numberBigConf = []; //编辑时的回显\n\n                it.formData.numberSmallConf = []; // 小机器\n\n                it.bunkerConf = {\n                  name: res.bunkerConfig.bunkerConfigName,\n                  time: ym.init.getDateTime(res.bunkerConfig.createTime)\n                };\n                JSON.parse(res.bunkerConfig.bunkerConfiguration).forEach(function (element) {\n                  it.TableFormData.push({\n                    name: element.name,\n                    number: element.number,\n                    isShow: element.isShow == +true ? '是' : '否'\n                  });\n\n                  if (enitBunkerConf) {\n                    //编辑的时候回显\n                    it.numberConf(res.bunkerConfig.machineType); //重置大小机器的tag\n\n                    it.formData.disableConf = true;\n                    it.formData.disableConfMahineName = res.bunkerConfig.machineType == 2 ? \"小型桌面机\" : \"大型柜式机\";\n                    it.formData.has = res.bunkerConfig.machineBunkerConfigId; //是编辑操作的ID\n\n                    it.formData.bunkerConfigName = res.bunkerConfig.bunkerConfigName; //配置名称\n\n                    it.formData.machineType = res.bunkerConfig.machineType; //设备类型\n\n                    it.formData.isSys = res.bunkerConfig.isSys; //是否系统配置 \n\n                    if (res.bunkerConfig.machineType == 2) {\n                      it.formData.numberSmallConf.push({\n                        name: element.name,\n                        number: element.number,\n                        isShow: element.isShow\n                      });\n                    } else {\n                      it.formData.numberBigConf.push({\n                        name: element.name,\n                        number: element.number,\n                        isShow: element.isShow\n                      });\n                    }\n                  }\n                });\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      numberConf: function numberConf(params) {\n        //切换料仓类型\n        if (params == +true) {\n          this.bunkerConfNumber = true;\n        } else {\n          this.bunkerConfNumber = false;\n        }\n      },\n      pushNumberConf: function pushNumberConf(params) {\n        //提交 料仓配置\n        var it = this;\n        _data['bunkerConfigName'] = params.bunkerConfigName;\n        _data['machineType'] = params.machineType;\n\n        if (params.machineType == +true) {\n          _data['bunkerConfiguration'] = JSON.stringify(params.numberBigConf);\n        } else {\n          _data['bunkerConfiguration'] = JSON.stringify(params.numberSmallConf);\n        }\n\n        _data['isSys'] = params.isSys;\n\n        if (it.formData.has) {\n          _data['machineBunkerConfigId'] = it.formData.has;\n        }\n\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'add_or_update_machine_bunker_config',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.InputAndVisible = false;\n                it.ISuccessfull(res.statusCode.msg);\n                delete _data['machineBunkerConfigId'];\n                delete _data['bunkerConfigName'];\n                delete _data['machineType'];\n                delete _data['bunkerConfiguration'];\n                delete _data['isShow'];\n                delete _data['isSys'];\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      bindMachineBunker: function bindMachineBunker(params) {\n        //绑定料仓配置\n        var it = this;\n        _data['machineBunkerConfigId'] = it.formData.machineBunkerConfigAllId;\n        _data['machineNumbers'] = it.machineNumber; //数组\n\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'bind_machine_bunker',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.detailTableAndVisible = false;\n                it.ISuccessfull(res.statusCode.msg);\n                delete _data['machineBunkerConfigId'];\n                delete _data['machineNumbers'];\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      miniTurntableUApush: function miniTurntableUApush(params) {\n        //小程序大转盘新建 /更新提交\n        var it = this;\n        _data['raffleName'] = params.raffleName;\n        _data['allowConsumeChance'] = params.allowConsumeChance;\n        _data['allowMemberConvert'] = params.allowMemberConvert;\n        _data['allowShareChance'] = params.allowShareChance;\n        _data['convertMilliliter'] = params.convertMilliliter || 0;\n        _data['maxLuckyValue'] = params.maxLuckyValue;\n        _data['status'] = params.status;\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'add_or_update_sys_draw_raffle_info',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.InputAndVisible = false;\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      miniTurntablePrizeExe: function miniTurntablePrizeExe(params) {\n        //导出抽奖记录\n        var it = this;\n        this.loading = true;\n        _data['userId'] = params.userId || '';\n        _data['nickName'] = params.nickName || '';\n        _data['adminName'] = params.adminName || '';\n        _data['raffleVersion'] = params.raffleVersion || '';\n        _data['itemType'] = params.itemType || '';\n        _data['status'] = params.status || '';\n        _data['startDate'] = params.startTime ? ym.init.getDateTime(params.startTime[0]).split(' ')[0] : '';\n        _data['endDate'] = params.startTime ? ym.init.getDateTime(params.startTime[1]).split(' ')[0] : '';\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'export_sys_user_draw_log_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.UpdateTableAndVisible = false;\n                it.ISuccessfull(res.statusCode.msg);\n                location.href = token._j.URLS.Development_Server_ + res.path;\n                it.loading = false;\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.loading = false;\n              it.IError(error);\n            }\n          }\n        });\n      },\n      maintenanceLogsOutPut: function maintenanceLogsOutPut(params) {\n        //导出运维日志\n        var it = this;\n        this.loading = true;\n        _data['maintainerId'] = params.maintainerId || '';\n        _data['maintainerName'] = params.maintainerName || '';\n        _data['machineNumber'] = params.machineNumber || '';\n        _data['status'] = params.status || '';\n        _data['startDate'] = params.startTime ? ym.init.getDateTime(params.startTime[0]).split(' ')[0] : '';\n        _data['endDate'] = params.startTime ? ym.init.getDateTime(params.startTime[1]).split(' ')[0] : '';\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'export_maintain_material_answer_log_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.UpdateTableAndVisible = false;\n                it.ISuccessfull(res.statusCode.msg);\n                location.href = token._j.URLS.Development_Server_ + res.path;\n                it.loading = false;\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.loading = false;\n              it.IError(error);\n            }\n          }\n        });\n      },\n      miniTurntableUA: function miniTurntableUA(params, prize) {\n        //小程序大转盘配置查看， 奖品查看\n        if (prize) {\n          //奖品查看\n          this.formData.raffleName = params[0].raffleName;\n          this.formData.allowConsumeChance = params[0].allowConsumeChance;\n          this.formData.allowMemberConvert = params[0].allowMemberConvert;\n          this.formData.allowShareChance = params[0].allowShareChance;\n          this.formData.convertMilliliter = params[0].convertMilliliter;\n          this.formData.maxLuckyValue = params[0].maxLuckyValue;\n          this.formData.status = params[0].status;\n        } else {\n          this.formData.raffleName = params[0].raffleName;\n          this.formData.allowConsumeChance = params[0].allowConsumeChance;\n          this.formData.allowMemberConvert = params[0].allowMemberConvert;\n          this.formData.allowShareChance = params[0].allowShareChance;\n          this.formData.convertMilliliter = params[0].convertMilliliter;\n          this.formData.maxLuckyValue = params[0].maxLuckyValue;\n          this.formData.status = params[0].status;\n        }\n      },\n      updateTurntableVersion: function updateTurntableVersion() {\n        //大转盘版本升级，将会把所有用户数据记录重置\n        //  upgrade_sys_draw_raffle_version\n        var it = this;\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'upgrade_sys_draw_raffle_version',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      exportLogExe: function exportLogExe(params) {\n        //导出预约记录\n        var it = this;\n        it.loading = true;\n        _data = Object.assign(_data, {\n          napeName: params.napeName || '',\n          status: params.status\n        });\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'export_pre_sell_nape_log_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                location.href = token._j.URLS.Development_Server_ + res.path;\n                setTimeout(function () {\n                  it.loading = false;\n                }, 1000);\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      appointmentPayEdesit: function appointmentPayEdesit(params) {\n        //预约详情\n        var it = this;\n        _data = Object.assign(_data, {\n          preSellLogId: params\n        });\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'pre_sell_nape_log_detail',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.appointmentPay = {};\n                Object.keys(res.data).forEach(function (element, index) {\n                  it.appointmentPay[element] = Object.values(res.data)[index];\n                });\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      appointmentPayGrant: function appointmentPayGrant(params) {\n        //核销 发券\n        var it = this;\n        _data = Object.assign(_data, {\n          preSellLogId: params\n        });\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'pre_sell_grant',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                delete _data['preSellLogId'];\n                it.TableAndVisible = false;\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      appointmentPayGrantCancel: function appointmentPayGrantCancel(params) {\n        //确认核销 信息【不发券】\n        var it = this;\n        _data = Object.assign(_data, {\n          preSellLogId: params\n        });\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'pre_sell_cancel',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                delete _data['preSellLogId'];\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      statusPrize: function statusPrize(params) {\n        // 更改奖品状态\n        var it = this;\n        _data = Object.assign(_data, params);\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'change_sys_draw_item_info_status',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                delete _data['itemId'];\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      },\n      addressTableList: function addressTableList(params) {\n        //查看单个用户地址\n        var it = this;\n        var xml = [];\n        _typeof(params) === 'object' ? params['page'] = it.pageTableNum : params['page'] = params;\n        _data = Object.assign(_data, params);\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'user_address_list',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.addressTables = [];\n\n                for (var i = 0; i < res.data.length; i++) {\n                  // \n                  xml.push({\n                    address: res.data[i].address,\n                    phone: res.data[i].phone,\n                    named: res.data[i].named\n                  });\n                }\n\n                it.addressTables = xml; // page++;\n                // it.pageTimerOut = setTimeout(() => {\n                //     if (it.pageCount - page < 0) {  //页数 > 总页数\n                //       clearTimeout(it.pageTimerOut);\n                //       return false;\n                //     }\n                //     it.addressTableList(page);\n                //   }, 500);\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      }\n    }\n  });\n}, false);\n\n//# sourceURL=webpack:///./src/public/javascripts/interactive/list.js?");

/***/ })

/******/ });