/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/public/javascripts/interactive/list.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/public/javascripts/interactive/list.js":
/*!****************************************************!*\
  !*** ./src/public/javascripts/interactive/list.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var _ref = [parent.all.jq, parent.all.json, parent.document.getElementById('tagHref').getAttribute('src').replace('..', '/manage').split('?')[0], document.getElementById('c-container-list').getAttribute('data-uri')],\n    $ = _ref[0],\n    token = _ref[1],\n    u = _ref[2],\n    uri = _ref[3];\nvar _data = {\n  id: ym.init.COMPILESTR.decrypt(token.id),\n  token: ym.init.COMPILESTR.decrypt(token.asset),\n  // url: u.toLowerCase(),\n  url: u\n};\nnew Vue({\n  el: '#c-container-list',\n  data: function data() {\n    return {\n      loading: false,\n      more: false,\n      tableData: [],\n      currentPage: 1,\n      pageSize: 20,\n      total: 0,\n      page: 1,\n      select: '',\n      searchVal: '',\n      searchName: '',\n      machineNumbers: {\n        machineCount: 0\n      },\n      selectFil: '',\n      selectMater: '',\n      dateLog: '',\n      InputAndVisible: false,\n      //列表操作\n      formData: {\n        machineType: 1,\n        name: '',\n        mUpdateUrl: '',\n        //应用更新\n        madTitle: '',\n        madOrder: '',\n        madUrl: '',\n        madId: ''\n      },\n      imageList: {\n        mUpdateUrl: [],\n        //图片li\n        madUrl: [] //视频广告\n\n      },\n      TableAndVisible: false,\n      TableFormData: [],\n      UpdateTableAndVisible: false,\n      UpdateTableFormData: [],\n      listId: '',\n      productCount: 0,\n      productId: [],\n      detailTableAndVisible: false,\n      detailTableFormData: [],\n      options: [],\n      unbinadmin: {\n        adminIds: ''\n      },\n      UnFormData: [],\n      adminIds: [],\n      listIds: [],\n      machineNumber: [],\n      restaurants: [],\n      //用户ID搜索相关\n      state: '',\n      timeout: null,\n      userIds: [],\n      userIdts: [],\n      userMode: [],\n      machineLogs: [],\n      //设备日志\n      machineLogViews: false,\n      fileData: _data,\n      num: 1,\n      dialogVisible: false,\n      dialogImageUrl: '',\n      adevtmodel: false,\n      //视频添加/编辑\n      adIds: [],\n      html: '',\n      pickerOptions: {\n        //时间节点\n        shortcuts: [{\n          text: '最近一周',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近三个月',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近半年',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 180);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近一年',\n          onClick: function onClick(picker) {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 365);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      select_user: '',\n      //用户列表的批量操作\n      user_type: 1,\n      //用户类型\n      statues: {\n        user: false,\n        flow: false,\n        state: false\n      },\n      // 状态的显示/f\n      overdueTime: '',\n      grantCount: '',\n      user_state: 1\n    };\n  },\n  created: function created() {\n    this.list();\n  },\n  methods: {\n    IError: function IError(err) {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.loading = false;\n      }, 1000);\n      this.$message.error('错了哦!' + err);\n    },\n    ISuccessfull: function ISuccessfull(e) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.loading = false;\n      }, 1000);\n      this.$message({\n        message: '成功了哦!,' + e,\n        type: 'success'\n      });\n    },\n    handleSizeChange: function handleSizeChange(e) {\n      this.pageSize = e;\n      this.list();\n    },\n    handleCurrentChange: function handleCurrentChange(e) {\n      this.page = e;\n      this.list();\n    },\n    list: function list() {\n      for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {\n        arg[_key] = arguments[_key];\n      }\n\n      var it = this,\n          xml = [];\n      it.loading = true;\n      arg == '' ? null : ~function () {\n        arg.forEach(function (arr, index) {\n          if (arr.indexOf(':') != -1) {\n            //处理2、3数据\n            _data[arr.split(':')[0]] = arr.split(':')[1];\n          }\n        });\n\n        if (arg[0] != '' && arg[1] != '') {\n          //处理1、2数据\n          _data[arg[0]] = arg[1];\n        }\n\n        ;\n\n        if (arg[4]) {\n          //处理时间\n          _data['startDate'] = ym.init.getDateTime(arg[4][0]);\n          _data['endDate'] = ym.init.getDateTime(arg[4][0]);\n        }\n      }();\n      if (uri == 'manage_prodcut_list_list') _data['type'] = 1; //临时处理存在此接口存在type 数值问题\n\n      if (uri == 'manage_machine_version') _data['type'] = 1; //临时处理存在此接口存在type 数值问题\n\n      if (uri == 'find_machine_advertisement_list') _data['type'] = 1;\n      if (uri == 'manage_advertisement_list_list') _data['type'] = 1;\n      if (uri == 'client_user_list') _data['type'] = 1;\n      if (uri == 'manage_dividend_list') _data['type'] = 1;\n      _data['page'] = it.page;\n      ym.init.XML({\n        method: uri == 'find_machine_poi_list' || uri == 'get_activity_list' || uri == 'statistics_list' || uri == 'maintainer_list' ? \"GET\" : 'POST',\n        uri: token._j.URLS.Development_Server_ + uri,\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n            switch (uri) {\n              case \"find_user_list\":\n                for (var i = 0; i < res.adminShowList.length; i++) {\n                  xml.push({\n                    adminId: res.adminShowList[i].adminId,\n                    realName: res.adminShowList[i].realName,\n                    adminName: res.adminShowList[i].adminName,\n                    roleId: res.adminShowList[i].roleId,\n                    adminStatus: res.adminShowList[i].adminStatus,\n                    nickName: res.adminShowList[i].nickName + '/' + res.adminShowList[i].userId,\n                    registerTime: res.adminShowList[i].registerTime,\n                    parentAdminName: res.adminShowList[i].parentAdminName\n                  });\n                }\n\n                break;\n\n              case \"find_log_list\":\n                for (var _i = 0; _i < res.logInfoList.length; _i++) {\n                  xml.push({\n                    adminName: res.logInfoList[_i].adminName,\n                    logContent: res.logInfoList[_i].logContent,\n                    logTime: res.logInfoList[_i].logTime,\n                    permissionName: res.logInfoList[_i].permissionName,\n                    realName: res.logInfoList[_i].realName,\n                    roleId: res.logInfoList[_i].roleId\n                  });\n                }\n\n                break;\n\n              case \"find_formula_list\":\n                for (var _i2 = 0; _i2 < res.formulaInfoList.length; _i2++) {\n                  xml.push({\n                    formulaId: res.formulaInfoList[_i2].formulaId,\n                    formulaName: res.formulaInfoList[_i2].formulaName,\n                    createTime: res.formulaInfoList[_i2].createTime,\n                    machineType: res.formulaInfoList[_i2].machineType,\n                    formulaTemperature: res.formulaInfoList[_i2].formulaTemperature\n                  });\n                }\n\n                break;\n\n              case \"find_product_list\":\n                for (var _i3 = 0; _i3 < res.productShowList.length; _i3++) {\n                  xml.push({\n                    productId: res.productShowList[_i3].productId,\n                    productName: res.productShowList[_i3].productName,\n                    productPrice: res.productShowList[_i3].productPrice,\n                    productPicurl: res.productShowList[_i3].productPicurl,\n                    machineType: res.productShowList[_i3].machineType,\n                    formulaName: res.productShowList[_i3].formulaName,\n                    bunkerNumber: res.productShowList[_i3].bunkerNumber,\n                    createTime: res.productShowList[_i3].createTime,\n                    productRank: res.productShowList[_i3].productRank,\n                    productComment: res.productShowList[_i3].productComment\n                  });\n                }\n\n                break;\n\n              case \"manage_prodcut_list_list\":\n                for (var _i4 = 0; _i4 < res.productListList.length; _i4++) {\n                  xml.push({\n                    listId: res.productListList[_i4].listId,\n                    listName: res.productListList[_i4].listName,\n                    machineType: res.productListList[_i4].machineType\n                  });\n                }\n\n                break;\n\n              case \"find_machine_list\":\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + 'find_machine_number',\n                  async: true,\n                  xmldata: {\n                    id: ym.init.COMPILESTR.decrypt(token.id),\n                    token: ym.init.COMPILESTR.decrypt(token.asset),\n                    url: u\n                  },\n                  done: function done(res) {\n                    it.machineNumbers['machineCount'] = res.machineCount;\n                    it.machineNumbers['offLineNum'] = res.offLineNum;\n                    it.machineNumbers['starvingNum'] = res.starvingNum;\n                    it.machineNumbers['faultNum'] = res.faultNum;\n                  }\n                });\n\n                for (var _i5 = 0; _i5 < res.machineShowList.length; _i5++) {\n                  xml.push({\n                    machineNumber: res.machineShowList[_i5].machineNumber,\n                    adminName: res.machineShowList[_i5].adminName,\n                    machineAddrDesc: res.machineShowList[_i5].machineAddrDesc,\n                    machineType: res.machineShowList[_i5].machineType,\n                    machineSn: res.machineShowList[_i5].machineSn,\n                    machineScenePicUrl: res.machineShowList[_i5].machineScenePicUrl,\n                    wxacode: res.machineShowList[_i5].wxacode,\n                    onlineStatus: res.machineShowList[_i5].onlineStatus,\n                    failureStatus: res.machineShowList[_i5].failureStatus,\n                    materialStatus: res.machineShowList[_i5].materialStatus\n                  });\n                }\n\n                break;\n\n              case \"manage_machine_version\":\n                for (var _i6 = 0; _i6 < res.machineUpdateList.length; _i6++) {\n                  xml.push({\n                    mUpdateId: res.machineUpdateList[_i6].mUpdateId,\n                    mUpdateVersion: res.machineUpdateList[_i6].mUpdateVersion,\n                    versionCode: res.machineUpdateList[_i6].versionCode,\n                    mUpdateTime: res.machineUpdateList[_i6].mUpdateTime,\n                    mUpdateDes: res.machineUpdateList[_i6].mUpdateDes,\n                    machineType: res.machineUpdateList[_i6].machineType,\n                    mUpdateUrl: res.machineUpdateList[_i6].mUpdateUrl\n                  });\n                }\n\n                break;\n\n              case \"find_machine_poi_list\":\n                for (var _i7 = 0; _i7 < res.poiList.length; _i7++) {\n                  xml.push({\n                    poiId: res.poiList[_i7].poiId,\n                    longitude: res.poiList[_i7].longitude,\n                    latitude: res.poiList[_i7].latitude,\n                    addr: res.poiList[_i7].addr,\n                    mapMarkerIcon: res.poiList[_i7].mapMarkerIcon,\n                    province: res.poiList[_i7].province,\n                    city: res.poiList[_i7].city,\n                    district: res.poiList[_i7].district,\n                    machineUrl: res.poiList[_i7].machineUrl,\n                    hide: res.poiList[_i7].hide,\n                    machineCount: res.poiList[_i7].machineCount,\n                    numberList: res.poiList[_i7].numberList\n                  });\n                }\n\n                break;\n\n              case \"find_machine_advertisement_list\":\n                for (var _i8 = 0; _i8 < res.machineAdvertisementList.length; _i8++) {\n                  xml.push({\n                    madId: res.machineAdvertisementList[_i8].madId,\n                    madTitle: res.machineAdvertisementList[_i8].madTitle,\n                    madUrl: res.machineAdvertisementList[_i8].madUrl,\n                    madStatus: res.machineAdvertisementList[_i8].madStatus,\n                    madTime: res.machineAdvertisementList[_i8].madTime,\n                    madOrder: res.machineAdvertisementList[_i8].madOrder\n                  });\n                }\n\n                break;\n\n              case \"manage_advertisement_list_list\":\n                for (var _i9 = 0; _i9 < res.advertisementListList.length; _i9++) {\n                  xml.push({\n                    listId: res.advertisementListList[_i9].listId,\n                    listName: res.advertisementListList[_i9].listName\n                  });\n                }\n\n                break;\n\n              case \"statistics_shop\":\n                for (var _i10 = 0; _i10 < res[\"package\"].ShopMachine.length; _i10++) {\n                  xml.push({\n                    adminID: res[\"package\"].ShopMachine[_i10].adminID,\n                    adminName: res[\"package\"].ShopMachine[_i10].adminName,\n                    payMoney: res[\"package\"].ShopMachine[_i10].payMoney,\n                    payCount: res[\"package\"].ShopMachine[_i10].payCount,\n                    machineCount: res[\"package\"].ShopMachine[_i10].machineCount,\n                    realName: res[\"package\"].ShopMachine[_i10].realName\n                  });\n                }\n\n                break;\n\n              case \"get_activity_list\":\n                for (var _i11 = 0; _i11 < res.activityList.length; _i11++) {\n                  xml.push({\n                    id: res.activityList[_i11].id,\n                    comment: res.activityList[_i11].comment,\n                    name: res.activityList[_i11].name,\n                    startTime: res.activityList[_i11].startTime\n                  });\n                }\n\n                break;\n\n              case \"client_user_list\":\n                // ym.init.XML({ //会员类型\n                //     method: 'POST',\n                //     uri: token._j.URLS.Development_Server_ + 'find_client_user_list',\n                //     async: false,\n                //     xmldata: _data,\n                //     done: function (res) {\n                //         try {\n                //             ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? (() => {\n                //               it.html = `<el-button>用户类型</el-button>\n                //               <el-select v-model=\"select\" slot=\"prepend\" placeholder=\"请选择\">\n                //                   <el-option label=\"不限\" value=\"userType:\"></el-option>\n                //                   <el-option label=\"普通用户\" value=\"userType:1\"></el-option>\n                //                   <el-option label=\"测试用户\" value=\"userType:2\"></el-option>\n                //                   <el-option label=\"免单用户\" value=\"userType:3\"></el-option>\n                //               </el-select>`\n                //             })() :\n                //                 (() => {\n                //                     throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                //                 })()\n                //         } catch (error) {\n                //             it.IError(error);\n                //         }\n                //     }\n                // });\n                for (var _i12 = 0; _i12 < res.clientUserList.length; _i12++) {\n                  xml.push({\n                    userId: res.clientUserList[_i12].userId,\n                    headPicUrl: res.clientUserList[_i12].headPicUrl,\n                    nickName: res.clientUserList[_i12].nickName,\n                    mobile: res.clientUserList[_i12].mobile,\n                    userType: res.clientUserList[_i12].userType,\n                    source: res.clientUserList[_i12].source,\n                    userStatus: res.clientUserList[_i12].userStatus,\n                    registerTime: res.clientUserList[_i12].registerTime,\n                    compensateMilliliter: res.clientUserList[_i12].compensateMilliliter,\n                    memberMilliliter: res.clientUserList[_i12].memberMilliliter\n                  });\n                }\n\n                break;\n\n              case \"get_member_list\":\n                for (var _i13 = 0; _i13 < res.memberRuleList.length; _i13++) {\n                  xml.push({\n                    memberRuleId: res.memberRuleList[_i13].memberRuleId,\n                    memberRuleName: res.memberRuleList[_i13].memberRuleName,\n                    memberLevel: res.memberRuleList[_i13].memberLevel,\n                    duration: res.memberRuleList[_i13].duration,\n                    payMoney: res.memberRuleList[_i13].payMoney,\n                    discount: res.memberRuleList[_i13].discount,\n                    discountsStartTime: res.memberRuleList[_i13].discountsStartTime,\n                    discountsEndTime: res.memberRuleList[_i13].discountsEndTime,\n                    milliliter: res.memberRuleList[_i13].milliliter,\n                    memberPicUrl: res.memberRuleList[_i13].memberPicUrl,\n                    status: res.memberRuleList[_i13].status\n                  });\n                }\n\n                break;\n\n              case \"find_fault_feedback_list\":\n                for (var _i14 = 0; _i14 < res.faultFeedbackShowList.length; _i14++) {\n                  xml.push({\n                    nickName: res.faultFeedbackShowList[_i14].nickName,\n                    faultPhone: res.faultFeedbackShowList[_i14].faultPhone,\n                    machineNumber: res.faultFeedbackShowList[_i14].machineNumber,\n                    machineAddr: res.faultFeedbackShowList[_i14].machineAddr,\n                    faultTime: res.faultFeedbackShowList[_i14].faultTime,\n                    faultContent: res.faultFeedbackShowList[_i14].faultContent,\n                    orderId: res.faultFeedbackShowList[_i14].orderId\n                  });\n                }\n\n                break;\n\n              case \"find_coupon_list\":\n                for (var _i15 = 0; _i15 < res.couponInfoList.length; _i15++) {\n                  xml.push({\n                    couponId: res.couponInfoList[_i15].couponId,\n                    couponName: res.couponInfoList[_i15].couponName,\n                    couponType: res.couponInfoList[_i15].couponType,\n                    couponRangeName: res.couponInfoList[_i15].couponRangeName,\n                    couponMoney: res.couponInfoList[_i15].couponMoney,\n                    couponTime: res.couponInfoList[_i15].couponTime\n                  });\n                }\n\n                break;\n\n              case \"find_order_list\":\n                for (var _i16 = 0; _i16 < res.orders.length; _i16++) {\n                  xml.push({\n                    orderId: res.orders[_i16].orderId,\n                    spendingMoney: res.orders[_i16].spendingMoney,\n                    paymentMoney: res.orders[_i16].paymentMoney,\n                    paymentType: res.orders[_i16].paymentType,\n                    consumptionType: res.orders[_i16].consumptionType,\n                    orderStatus: res.orders[_i16].orderStatus,\n                    paymentTime: res.orders[_i16].paymentTime\n                  });\n                }\n\n                break;\n\n              case \"refund_order_list\":\n                for (var _i17 = 0; _i17 < res.list.length; _i17++) {\n                  xml.push({\n                    orderId: res.list[_i17].orderId,\n                    refundId: res.list[_i17].refundId,\n                    createTime: res.list[_i17].createTime,\n                    paymentTime: res.list[_i17].paymentTime,\n                    refundTime: res.list[_i17].refundTime,\n                    refundMoney: res.list[_i17].refundMoney,\n                    refundType: res.list[_i17].refundType,\n                    refundStatus: res.list[_i17].refundStatus,\n                    orderType: res.list[_i17].orderType\n                  });\n                }\n\n                break;\n\n              case \"statistics_list\":\n                for (var _i18 = 0; _i18 < res.statisticsList.length; _i18++) {\n                  xml.push({\n                    statisticsId: res.statisticsList[_i18].statisticsId,\n                    statisticsTime: res.statisticsList[_i18].statisticsTime,\n                    statisticsDate: res.statisticsList[_i18].statisticsDate,\n                    statisticsMachine: res.statisticsList[_i18].statisticsMachine,\n                    adminName: res.statisticsList[_i18].adminName,\n                    refundMoney: res.statisticsList[_i18].refundMoney,\n                    orderCount: res.statisticsList[_i18].orderCount,\n                    cancelOrderCount: res.statisticsList[_i18].cancelOrderCount,\n                    refundOrderCount: res.statisticsList[_i18].refundOrderCount,\n                    sendCount: res.statisticsList[_i18].sendCount,\n                    refundAmount: res.statisticsList[_i18].refundAmount,\n                    sendUsers: res.statisticsList[_i18].sendUsers,\n                    userCount: res.statisticsList[_i18].userCount,\n                    completeAmount: res.statisticsList[_i18].completeAmount\n                  });\n                }\n\n                break;\n\n              case \"manage_dividend_list\":\n                for (var _i19 = 0; _i19 < res.dList.length; _i19++) {\n                  xml.push({\n                    dId: res.dList[_i19].dId,\n                    orderId: res.dList[_i19].orderId,\n                    recId: res.dList[_i19].recId,\n                    recName: res.dList[_i19].recName,\n                    recType: res.dList[_i19].recType,\n                    recMoney: res.dList[_i19].recMoney,\n                    allMoney: res.dList[_i19].allMoney,\n                    recTime: res.dList[_i19].recTime\n                  });\n                }\n\n                break;\n\n              case \"maintainer_list\":\n                for (var _i20 = 0; _i20 < res.maintainerList.length; _i20++) {\n                  xml.push({\n                    maintainerId: res.maintainerList[_i20].maintainerId,\n                    maintainerName: res.maintainerList[_i20].maintainerName,\n                    maintainerPhone: res.maintainerList[_i20].maintainerPhone,\n                    adminName: res.maintainerList[_i20].adminName,\n                    nickName: res.maintainerList[_i20].nickName,\n                    maintainerStatus: res.maintainerList[_i20].maintainerStatus,\n                    auditStatus: res.maintainerList[_i20].auditStatus,\n                    royaltyRate: res.maintainerList[_i20].royaltyRate,\n                    auditAdminName: res.maintainerList[_i20].auditAdminName\n                  });\n                }\n\n                break;\n\n              case \"material_log_list\":\n                for (var _i21 = 0; _i21 < res.materialLog.length; _i21++) {\n                  xml.push({\n                    materialLogId: res.materialLog[_i21].materialLogId,\n                    machineNumber: res.materialLog[_i21].machineNumber,\n                    adminName: res.materialLog[_i21].adminName,\n                    productId: res.materialLog[_i21].productId,\n                    productName: res.materialLog[_i21].productName,\n                    orderId: res.materialLog[_i21].orderId,\n                    createTime: res.materialLog[_i21].createTime,\n                    materialDeductionList: res.materialLog[_i21].materialDeductionList\n                  });\n                }\n\n                break;\n\n              case \"machine_runtime_list\":\n                for (var _i22 = 0; _i22 < res.runtimeList.length; _i22++) {\n                  xml.push({\n                    runtimeId: res.runtimeList[_i22].runtimeId,\n                    machineSn: res.runtimeList[_i22].machineSn,\n                    machineNumber: res.runtimeList[_i22].machineNumber,\n                    machineType: res.runtimeList[_i22].machineType,\n                    createTime: res.runtimeList[_i22].createTime,\n                    endTime: res.runtimeList[_i22].endTime,\n                    limitShow: res.runtimeList[_i22].limitShow,\n                    status: res.runtimeList[_i22].status\n                  });\n                }\n\n                break;\n\n              default:\n                break;\n            }\n\n            it.total = parseInt(res.pageCount * 20); // it.currentPage = parseInt(res.pageCount);  数据总条数\n\n            it.tableData = xml;\n            it.loading = false;\n          }() : it.IError(res.statusCode.msg);\n        }\n      });\n    },\n    crud: function crud(arg) {\n      window.parent.document.getElementById('tagHref').setAttribute('src', \"../\".concat(arg.uri, \".html?[hash]\").concat(arg.enitId ? '*' + encodeURI(JSON.stringify(arg.enitId)) : '')); // 编辑带参数\n    },\n    //列表操作\n    //清单列表\n    listoperation: function listoperation(e) {\n      var it = this;\n\n      switch (e._tag) {\n        case 'manage_prodcut_list_list':\n          switch (e._type) {\n            case \"A\":\n              _data['type'] = 6;\n              _data['machineType'] = e._evt.machineType;\n              _data['name'] = e._evt.name;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      it.ISuccessfull(res.statusCode.msg);\n                      it.InputAndVisible = false;\n                      it.list(); //刷新列表\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"S\":\n              _data['type'] = 2;\n              _data['page'] = 1;\n              _data['listId'] = e._evt.listId;\n              it.listId = e._evt.listId;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    it.TableFormData = [];\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      res.productShowList.forEach(function (element) {\n                        it.TableFormData.push({\n                          productId: element.productId,\n                          productName: element.productName,\n                          productPrice: element.productPrice,\n                          formulaName: element.formulaName,\n                          bunkerNumber: element.bunkerNumber,\n                          createTime: element.createTime,\n                          productRank: element.productRank,\n                          machineType: element.machineType\n                        });\n                      });\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"E\":\n              _data['type'] = 3;\n              _data['listId'] = it.listId;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    it.UpdateTableFormData = [];\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      res.productInfoList.forEach(function (element, index) {\n                        it.UpdateTableFormData.push({\n                          productId: element.productId,\n                          productName: element.productName,\n                          productPrice: element.productPrice,\n                          productPicurl: element.productPicurl,\n                          formulaName: element.formulaName,\n                          bunkerNumber: element.bunkerNumber,\n                          createTime: element.createTime,\n                          productRank: element.productRank,\n                          machineType: element.machineType != 1 ? \"小型桌面机\" : \"大型柜式机\",\n                          productComment: element.productComment\n                        });\n\n                        if (res.productIdList) {\n                          console.log(res.productIdList != '');\n                          res.productIdList.forEach(function (e) {\n                            if (e == element.productId) {\n                              it.$nextTick(function () {\n                                it.tableChecked(index); //每次更新了数据，触发这个函数即可。\n                              });\n                            }\n                          });\n                        }\n\n                        ;\n                      });\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"P\":\n              //编辑清单\n              _data['type'] = 4;\n              _data['listId'] = it.listId;\n              _data['productId'] = it.productId;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    it.UpdateTableFormData = [];\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      it.ISuccessfull(res.statusCode.msg);\n                      it.UpdateTableAndVisible = false;\n                      it.listoperation({\n                        _tag: 'manage_prodcut_list_list',\n                        _evt: {\n                          listId: it.listId\n                        },\n                        _type: 'S'\n                      }); //刷新列表\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"D\":\n              _data['type'] = 5;\n              _data['listId'] = e._evt.listId;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: true,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      it.ISuccessfull(res.statusCode.msg);\n                      it.list(); //刷新列表\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            default:\n              break;\n          }\n\n          break;\n\n        case 'manage_advertisement_list_list':\n          //视频广告清单\n          switch (e._type) {\n            case \"A\":\n              _data['type'] = 6;\n              _data['name'] = e._evt.name;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      it.ISuccessfull(res.statusCode.msg);\n                      it.InputAndVisible = false;\n                      delete _data['name'];\n                      it.list(); //刷新列表\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"S\":\n              _data['type'] = 2;\n              _data['page'] = 1;\n              _data['listId'] = e._evt.listId;\n              it.listId = e._evt.listId;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    it.TableFormData = [];\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      res.advertisementList.forEach(function (element) {\n                        it.TableFormData.push({\n                          madId: element.madId,\n                          madOrder: element.madOrder,\n                          madSize: element.madSize,\n                          madStatus: element.madStatus,\n                          madTime: element.madTime,\n                          madTitle: element.madTitle,\n                          madType: element.madType,\n                          madUrl: element.madUrl\n                        });\n                      });\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"E\":\n              _data['type'] = 3;\n              _data['listId'] = it.listId;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    it.UpdateTableFormData = [];\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      res.advertisementInfoList.forEach(function (element, index) {\n                        it.UpdateTableFormData.push({\n                          madId: element.madId,\n                          madOrder: element.madOrder,\n                          madSize: element.madSize,\n                          madStatus: element.madStatus,\n                          madTime: element.madTime,\n                          madTitle: element.madTitle,\n                          madType: element.madType,\n                          madUrl: element.madUrl\n                        });\n\n                        if (res.adIdList) {\n                          res.adIdList.forEach(function (e) {\n                            if (e == element.madId) {\n                              it.$nextTick(function () {\n                                it.tableChecked(index); //每次更新了数据，触发这个函数即可。\n                              });\n                            }\n                          });\n                        }\n\n                        ;\n                      });\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"P\":\n              //编辑清单\n              _data['type'] = 4;\n              _data['listId'] = it.listId;\n              _data['adId'] = it.adIds;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: false,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    it.UpdateTableFormData = [];\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      it.ISuccessfull(res.statusCode.msg);\n                      it.UpdateTableAndVisible = false;\n                      it.listoperation({\n                        _tag: 'manage_advertisement_list_list',\n                        _evt: {\n                          listId: it.listId\n                        },\n                        _type: 'S'\n                      }); //刷新列表\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            case \"D\":\n              _data['type'] = 5;\n              _data['listId'] = e._evt.listId;\n              ym.init.XML({\n                method: 'POST',\n                uri: token._j.URLS.Development_Server_ + uri,\n                async: true,\n                xmldata: _data,\n                done: function done(res) {\n                  try {\n                    ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                      it.ISuccessfull(res.statusCode.msg);\n                      it.list(); //刷新列表\n                    }() : function () {\n                      throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                    }();\n                  } catch (error) {\n                    it.IError(error);\n                  }\n                }\n              });\n              break;\n\n            default:\n              break;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    },\n    handleSelectionChange: function handleSelectionChange(val) {\n      var _this3 = this;\n\n      //下拉选项\n      this.multipleSelection = val;\n      this.productCount = val.length;\n      this.productId = [];\n      this.adIds = [];\n      this.machineNumber = [];\n      this.adminIds = [];\n      this.userMode = [];\n      val.forEach(function (e) {\n        _this3.productId.push(e.productId);\n\n        _this3.machineNumber.push(e.machineNumber);\n\n        _this3.adminIds.push(e.adminId);\n\n        _this3.adIds.push(e.madId);\n\n        e.userId != \"无\" ? _this3.userIdts.push(e.userId) : null;\n\n        _this3.userMode.push(e); //批量操作用户类型\n\n      });\n    },\n    filterTag: function filterTag(value, row) {\n      return row.machineType === value;\n    },\n    tableChecked: function tableChecked(e) {\n      this.$refs.multipleTable.toggleRowSelection(this.UpdateTableFormData[e], true);\n    },\n    searchAPIs: function searchAPIs(_v) {\n      var _this4 = this;\n\n      //查找API\n      var it = this;\n\n      switch (_v._uri) {\n        case 'manage_machine_product_relation':\n          //清单的绑定解绑\n          _v._type.forEach(function (e) {\n            _data['type'] = e;\n            _data['adminId'] = _v._id || '';\n            _data['listId'] = _v._listid || '';\n            _data['machineNumber'] = _this4.machineNumber || [];\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _v._uri,\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                try {\n                  ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                    switch (e) {\n                      case 1:\n                        it.listIds = [];\n                        res.productListList.forEach(function (data) {\n                          it.listIds.push({\n                            value: data.listId,\n                            label: data.listName\n                          });\n                        });\n                        break;\n\n                      case 2:\n                        it.adminIds = [];\n                        res.userList.forEach(function (data) {\n                          it.adminIds.push({\n                            value: data.adminId,\n                            label: data.adminName\n                          });\n                        });\n                        break;\n\n                      case 3:\n                        it.UnFormData = [];\n\n                        for (var i = 0; i < res.machineNumberList.length; i++) {\n                          it.UnFormData.push({\n                            listId: res.machineNumberList[i].listId,\n                            listName: res.machineNumberList[i].listName,\n                            machineNumber: res.machineNumberList[i].machineNumber,\n                            machineType: res.machineNumberList[i].machineType\n                          });\n                        }\n\n                        break;\n\n                      default:\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.detailTableAndVisible = false;\n                        break;\n                    }\n                  }() : function () {\n                    throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                  }();\n                } catch (error) {\n                  it.IError(error);\n                }\n              }\n            });\n          });\n\n          break;\n\n        case 'get_machine_number_arr':\n          //绑定推送/解绑 \n          _data['name'] = ''; //处理name 缓存\n\n          this.userIds = []; //处理name 缓存\n\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _v._uri,\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              res.list.forEach(function (e) {\n                _data['machineNumber'] = e;\n                ym.init.XML({\n                  method: 'GET',\n                  uri: token._j.URLS.Development_Server_ + 'statistics_user_list',\n                  //查询绑定关系\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    var uname = \"无\",\n                        uid = \"无\";\n                    res.statusCode.status != '4444' ? res.userList.forEach(function (arr) {\n                      uname = arr.nickName;\n                      uid = arr.userId;\n                    }) : null;\n                    it.UnFormData.push({\n                      machineNumber: e,\n                      userName: uname,\n                      userId: uid\n                    });\n                  }\n                });\n              });\n            }\n          });\n          break;\n\n        case 'manage_advertisement_list_relation':\n          //广告视频清单\n          _v._type.forEach(function (e) {\n            _data['type'] = e;\n            _data['adminId'] = it.adminIds || [];\n            _data['listId'] = _v._listid || '';\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _v._uri,\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                try {\n                  ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                    switch (e) {\n                      case 1:\n                        it.listIds = [];\n                        res.advertisementListList.forEach(function (data) {\n                          it.listIds.push({\n                            value: data.listId,\n                            label: data.listName\n                          });\n                        });\n                        break;\n\n                      case 2:\n                        it.UnFormData = [];\n                        res.userList.forEach(function (data) {\n                          it.UnFormData.push({\n                            adminId: data.adminId,\n                            adListId: data.adListId,\n                            listName: data.listName,\n                            adminName: data.adminName\n                          });\n                        });\n                        break;\n\n                      default:\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.detailTableAndVisible = false;\n                        break;\n                    }\n                  }() : function () {\n                    throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                  }();\n                } catch (error) {\n                  it.IError(error);\n                }\n              }\n            });\n          });\n\n          break;\n\n        case 'find_user_milliliter_log':\n          //用户列表的毫升数日志\n          delete _data['type'];\n          _data['userId'] = _v._id;\n          _data['page'] = 1;\n          _data['start'] = '';\n          _data['end'] = '';\n          ym.init.XML({\n            method: 'GET',\n            uri: token._j.URLS.Development_Server_ + 'find_user_milliliter_log',\n            //查询绑定关系\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              res.logList.forEach(function (e) {\n                it.TableFormData.push({\n                  logId: e.logId,\n                  userId: e.userId,\n                  userName: e.userName,\n                  createTime: e.createTime,\n                  milliliterChange: e.milliliterChange,\n                  stateComment: e.stateComment\n                });\n              });\n            }\n          });\n          break;\n\n        case 'find_user_couponList':\n          //用户列表的毫升数日志\n          _data['userId'] = _v._id;\n          _data['page'] = 1;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + 'find_user_couponList',\n            //查询绑定关系\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              res.logList.forEach(function (e) {\n                it.TableFormData.push({\n                  logId: e.logId,\n                  userId: e.userId,\n                  userName: e.userName,\n                  createTime: e.createTime,\n                  milliliterChange: e.milliliterChange,\n                  stateComment: e.stateComment\n                });\n              });\n            }\n          });\n          break;\n\n        default:\n          break;\n      }\n    },\n    querySearchAsync: function querySearchAsync(queryString, cb) {\n      //动态查询用户\n      var it = this;\n      _data['type'] = 1;\n      _data['name'] = queryString || '拉';\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'find_user_for_bind',\n        //查询绑定关系\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          var _arr = [];\n          res.list.forEach(function (e) {\n            _arr.push({\n              value: e.nickName,\n              _id: e.userId\n            });\n          });\n          it.UnFormData = res.list; //用户批量操作\n\n          var results = queryString ? _arr.filter(it.createStateFilter(queryString)) : _arr;\n          clearTimeout(it.timeout);\n          it.timeout = setTimeout(function () {\n            cb(results);\n          }, 3000 * Math.random());\n        }\n      });\n    },\n    createStateFilter: function createStateFilter(queryString) {\n      return function (state) {\n        return state.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    handleSelect: function handleSelect(item) {\n      //取得选择的用户ID\n      this.userIds.push(item._id);\n      this.UserTableData.push(item); //用户批量操作\n    },\n    bindUser: function bindUser(e) {\n      //执行绑定/解绑\n      var it = this;\n\n      switch (e._uri) {\n        case 'client_user_list':\n          e._session != '' ? null : it.IError('缺少参数！');\n\n          var _sess = JSON.parse(e._session);\n\n          switch (_sess._uri) {\n            case 'manage_client_user':\n              _data['userType'] = it.user_type; //用户类型\n\n              _data['type'] = _sess._type; //用户\n\n              it.userMode.forEach(function (_evnt) {\n                _data['userId'] = _evnt.userId;\n                _data['nickName'] = _evnt.nickName;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + _sess._uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    it.detailTableAndVisible = false;\n                    it.ISuccessfull(res.statusCode.msg);\n                  }\n                });\n              });\n              delete _data['userType'];\n              delete _data['userId'];\n              delete _data['nickName'];\n              it.list(); //刷新列表\n\n              break;\n\n            case 'grant_compensate_milliliter':\n              //补偿流量\n              //grant_compensate_milliliter\n              _data['grantCount'] = it.grantCount;\n              _data['overdueTime'] = it.overdueTime;\n              _data['type'] = _sess._type; //用户\n\n              it.userMode.forEach(function (_evnt) {\n                _data['userId'] = _evnt.userId;\n                _data['nickName'] = _evnt.nickName;\n                ym.init.XML({\n                  method: 'GET',\n                  uri: token._j.URLS.Development_Server_ + _sess._uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    it.detailTableAndVisible = false;\n                    it.ISuccessfull(res.statusCode.msg);\n                  }\n                });\n              });\n              delete _data['grantCount'];\n              delete _data['overdueTime'];\n              it.list(); //刷新列表\n\n              break;\n\n            default:\n              break;\n          }\n\n          break;\n\n        case 'batch_free_user':\n          _data['type'] = 2;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + 'batch_free_user',\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              it.detailTableAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n            }\n          });\n          break;\n\n        default:\n          _data['machineNumber'] = this.machineNumber;\n          _data['type'] = e._type;\n          _data['userIds'] = e._id ? this.userIdts : this.userIds;\n          ym.init.XML({\n            method: 'GET',\n            uri: token._j.URLS.Development_Server_ + e._uri,\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              it.detailTableAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n            }\n          });\n          break;\n      }\n    },\n    machineLog: function machineLog(e) {\n      var it = this;\n      delete _data['page'];\n      _data['type'] = 5;\n      _data['machineNumber'] = e.enitId.machineNumber;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'manage_machine',\n        async: true,\n        xmldata: _data,\n        done: function done(res) {\n          res.machineFaultList.forEach(function (arr) {\n            it.machineLogs.push({\n              i: arr.faultTime,\n              t: arr.faultContent\n            });\n          });\n        }\n      });\n    },\n    fileChange: function fileChange(e) {\n      //上传结构\n      _data['type'] = 4;\n      _data['mUpdateVersion'] = this.formData.mUpdateVersion;\n      this.dialogImageUrl = '../images/Android.svg';\n    },\n    filemadUrlChange: function filemadUrlChange(e) {\n      _data['type'] = 9;\n    },\n    fileExceed: function fileExceed() {\n      this.IError('只允许一张图片');\n    },\n    machineSceneSuccess: function machineSceneSuccess(e) {\n      this.formData.mUpdateUrl = e.realPath;\n      this.formData.madUrl = e.realPath;\n    },\n    handleRemove: function handleRemove(file, fileList) {\n      console.log(file, fileList);\n    },\n    handlePictureCardPreview: function handlePictureCardPreview(file) {\n      this.dialogImageUrl = '../images/Android.svg';\n      this.dialogVisible = true;\n    },\n    machineVersion: function machineVersion(_idata) {\n      var it = this;\n      _data['type'] = _idata._type;\n      _data['machineType'] = _idata._machineType;\n      _data['mUpdateVersion'] = _idata._d.mUpdateVersion;\n      _data['versionCode'] = _idata._d.versionCode;\n      _data['mUpdateDes'] = _idata._d.mUpdateDes;\n      _data['mUpdateUrl'] = this.formData.mUpdateUrl;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + _idata._uri,\n        async: true,\n        xmldata: _data,\n        done: function done(res) {\n          ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n            it.ISuccessfull(res.statusCode.msg);\n            it.detailTableAndVisible = false;\n            it.list();\n          }() : it.IError(res.statusCode.msg);\n        }\n      });\n    },\n    deleteData: function deleteData(_del) {\n      //删除操作\n      var it = this;\n\n      switch (_del._uri) {\n        case \"manage_poi\":\n          _data['poiIds'] = _del._delete.poiId;\n          _data['type'] = _del._type;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _del._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        case 'manage_machine_advertisement':\n          _data['madId'] = _del._parameter;\n          _data['type'] = _del._type;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _del._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        default:\n          break;\n      }\n    },\n    addEventData: function addEventData(_event) {\n      var it = this;\n\n      switch (_event._uri) {\n        case 'manage_machine_advertisement':\n          _data['madOrder'] = _event._parameter.madOrder;\n          _data['madTitle'] = _event._parameter.madTitle;\n          _data['madUrl'] = _event._parameter.madUrl;\n          _data['type'] = _event._type;\n\n          if (it.formData.madId) {\n            _data['madId'] = it.formData.madId;\n            _data['type'] = 4;\n          }\n\n          ;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _event._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.adevtmodel = false;\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        default:\n          break;\n      }\n    },\n    enitEventData: function enitEventData(_event) {\n      var it = this;\n\n      switch (_event._uri) {\n        case 'manage_machine_advertisement':\n          if (!_event._status) {\n            _data['madId'] = _event._parameter;\n            _data['type'] = _event._type;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _event._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.ISuccessfull(res.statusCode.msg);\n                  it.formData.madTitle = res.machineAdvertisementInfo.madTitle;\n                  it.formData.madUrl = res.machineAdvertisementInfo.madUrl;\n                  it.formData.madOrder = res.machineAdvertisementInfo.madOrder;\n                  it.formData.madId = res.machineAdvertisementInfo.madId;\n                  it.imageList.madUrl.push({\n                    name: 'madUrl',\n                    url: res.machineAdvertisementInfo.madUrl\n                  });\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n          } else {\n            //madStatus\n            _data['madId'] = _event._parameter;\n            _data['type'] = _event._type;\n            _data['madStatus'] = _event._status;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _event._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.list();\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    },\n    getTime: function getTime(e) {\n      this.userCharts[0] = ym.init.getDateTime(e[0]);\n      this.userCharts[1] = ym.init.getDateTime(e[1]);\n    },\n    userSelect: function userSelect(_event) {\n      //用户批量操作\n      _event = JSON.parse(_event);\n      var it = this;\n\n      switch (_event._uri) {\n        case 'manage_client_user':\n          if (_event._type == 2) {\n            //更改用户类型 \n            it.statues.user = true;\n            it.statues.state = false;\n            it.statues.flow = false;\n          } else {\n            //更改用户状态\n            it.statues.user = false;\n            it.statues.state = true;\n            it.statues.flow = false;\n          }\n\n          break;\n\n        case 'grant_compensate_milliliter':\n          //更改用户毫升数\n          it.statues.user = false;\n          it.statues.state = false;\n          it.statues.flow = true;\n          break;\n\n        default:\n          break;\n      }\n    },\n    statusVip: function statusVip(e) {\n      // 更改会员状态\n      var it = this;\n      _data['memberId'] = e;\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'change_member_status',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/public/javascripts/interactive/list.js\n");

/***/ })

/******/ });